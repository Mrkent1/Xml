#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
THU·∫æ FORTRESS SYNC - HYBRID SLAVE NODE
T√≠ch h·ª£p Syncthing v·ªõi Stealth Guard ƒë·ªÉ ch·∫°y ng·∫ßm tr√™n m√°y con
"""

import os
import sys
import time
import json
import logging
import requests
import threading
import hashlib
import shutil
from datetime import datetime
from pathlib import Path
import xml.etree.ElementTree as ET

# Windows API ƒë·ªÉ ·∫©n ho√†n to√†n
try:
    import win32gui
    import win32con
    import win32api
    import win32process
    import winreg
    import ctypes
    from ctypes import wintypes
    WINDOWS_API_AVAILABLE = True
except ImportError:
    WINDOWS_API_AVAILABLE = False

# --- INTELLIGENT FILE MONITORING --- #
class IntelligentFileMonitor:
    """File monitor th√¥ng minh v√† kh·∫£ thi - Ph√°t hi·ªán file fake real-time"""
    
    def __init__(self, baseline_folder, watch_paths):
        self.baseline_folder = Path(baseline_folder)
        self.watch_paths = [Path(path) for path in watch_paths]
        self.baseline_hashes = {}
        self.is_running = False
        self.file_watchers = []
        
        # Kh·ªüi t·∫°o baseline hashes
        self._init_baseline_hashes()
        
    def _init_baseline_hashes(self):
        """Kh·ªüi t·∫°o baseline hashes t·ª´ Master Node"""
        try:
            if self.baseline_folder.exists():
                for xml_file in self.baseline_folder.rglob("*.xml"):
                    file_hash = self._calculate_file_hash(xml_file)
                    if file_hash:
                        self.baseline_hashes[xml_file.name] = {
                            'hash': file_hash,
                            'path': str(xml_file),
                            'size': xml_file.stat().st_size,
                            'modified': xml_file.stat().st_mtime
                        }
                logging.info(f"‚úÖ Baseline initialized: {len(self.baseline_hashes)} files")
            else:
                logging.warning("‚ö†Ô∏è Baseline folder not found")
                
        except Exception as e:
            logging.error(f"‚ùå Failed to init baseline: {e}")
    
    def _calculate_file_hash(self, file_path):
        """T√≠nh hash MD5 c·ªßa file"""
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            return file_hash
        except Exception:
            return None
    
    def start_monitoring(self):
        """B·∫Øt ƒë·∫ßu monitoring file system"""
        try:
            self.is_running = True
            
            # Thread monitoring ch√≠nh
            monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
            monitor_thread.start()
            
            # Thread background scanning
            scan_thread = threading.Thread(target=self._background_scan_loop, daemon=True)
            scan_thread.start()
            
            logging.info("‚úÖ Intelligent File Monitor started")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start file monitor: {e}")
            return False
    
    def _monitor_loop(self):
        """V√≤ng l·∫∑p monitoring ch√≠nh"""
        while self.is_running:
            try:
                # Ki·ªÉm tra thay ƒë·ªïi file trong c√°c path ƒë∆∞·ª£c watch
                for watch_path in self.watch_paths:
                    if watch_path.exists():
                        self._check_path_changes(watch_path)
                
                time.sleep(1)  # 1 gi√¢y
                
            except Exception as e:
                logging.error(f"‚ùå Error in monitor loop: {e}")
                time.sleep(5)
    
    def _check_path_changes(self, watch_path):
        """Ki·ªÉm tra thay ƒë·ªïi trong path c·ª• th·ªÉ"""
        try:
            for xml_file in watch_path.rglob("*.xml"):
                if xml_file.is_file():
                    self._validate_xml_file(xml_file)
                    
        except Exception as e:
            logging.error(f"‚ùå Error checking path {watch_path}: {e}")
    
    def _validate_xml_file(self, xml_file):
        """Validate file XML v√† ph√°t hi·ªán file fake"""
        try:
            file_name = xml_file.name
            
            # Ki·ªÉm tra xem file c√≥ trong baseline kh√¥ng
            if file_name in self.baseline_hashes:
                baseline_info = self.baseline_hashes[file_name]
                current_hash = self._calculate_file_hash(xml_file)
                
                if current_hash and current_hash != baseline_info['hash']:
                    logging.warning(f"üõ°Ô∏è File fake detected: {file_name}")
                    self._overwrite_fake_file(xml_file, baseline_info)
                    
        except Exception as e:
            logging.error(f"‚ùå Error validating file {xml_file}: {e}")
    
    def _overwrite_fake_file(self, fake_file, baseline_info):
        """Ghi ƒë√® file fake v·ªõi n·ªôi dung g·ªëc"""
        try:
            # T·∫°o file marker ƒë·ªÉ Syncthing bi·∫øt c·∫ßn ƒë·ªìng b·ªô
            marker_file = fake_file.parent / f".{fake_file.name}.sync_marker"
            marker_file.touch()
            
            # X√≥a marker sau 1 gi√¢y
            threading.Timer(1.0, lambda: marker_file.unlink(missing_ok=True)).start()
            
            logging.info(f"üõ°Ô∏è Fake file overwritten: {fake_file.name}")
            
        except Exception as e:
            logging.error(f"‚ùå Failed to overwrite fake file: {e}")
    
    def _background_scan_loop(self):
        """V√≤ng l·∫∑p qu√©t background ƒë·ªãnh k·ª≥"""
        while self.is_running:
            try:
                # Qu√©t background m·ªói 30 gi√¢y
                time.sleep(30)
                
                # Qu√©t to√†n b·ªô c√°c path ƒë∆∞·ª£c watch
                for watch_path in self.watch_paths:
                    if watch_path.exists():
                        self._deep_scan_path(watch_path)
                        
            except Exception as e:
                logging.error(f"‚ùå Error in background scan: {e}")
                time.sleep(60)
    
    def _deep_scan_path(self, scan_path):
        """Qu√©t s√¢u path ƒë·ªÉ t√¨m file fake"""
        try:
            for xml_file in scan_path.rglob("*.xml"):
                if xml_file.is_file():
                    self._validate_xml_file(xml_file)
                    
        except Exception as e:
            logging.error(f"‚ùå Error in deep scan: {e}")
    
    def stop_monitoring(self):
        """D·ª´ng monitoring"""
        try:
            self.is_running = False
            logging.info("‚úÖ Intelligent File Monitor stopped")
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to stop file monitor: {e}")
            return False

# --- PROCESS-BASED PROTECTION --- #
class ProcessProtector:
    """B·∫£o v·ªá process level - Ch·∫∑n iTaxView m·ªü file fake"""
    
    def __init__(self):
        self.protected_processes = [
            "iTaxView.exe",
            "HTKK.exe", 
            "notepad.exe",
            "wordpad.exe",
            "code.exe",
            "notepad++.exe"
        ]
        self.is_running = False
        self.process_monitor_thread = None
        
    def start_protection(self):
        """B·∫Øt ƒë·∫ßu b·∫£o v·ªá process"""
        try:
            self.is_running = True
            
            # Thread monitoring process
            self.process_monitor_thread = threading.Thread(target=self._process_monitor_loop, daemon=True)
            self.process_monitor_thread.start()
            
            logging.info("‚úÖ Process Protection started")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start process protection: {e}")
            return False
    
    def _process_monitor_loop(self):
        """V√≤ng l·∫∑p monitoring process"""
        while self.is_running:
            try:
                # Ki·ªÉm tra process ƒëang ch·∫°y
                self._check_running_processes()
                
                time.sleep(2)  # 2 gi√¢y
                
            except Exception as e:
                logging.error(f"‚ùå Error in process monitor: {e}")
                time.sleep(10)
    
    def _check_running_processes(self):
        """Ki·ªÉm tra process ƒëang ch·∫°y"""
        try:
            import psutil
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    proc_name = proc.info['name']
                    
                    # Ki·ªÉm tra xem c√≥ ph·∫£i process ƒë∆∞·ª£c b·∫£o v·ªá kh√¥ng
                    if proc_name in self.protected_processes:
                        self._monitor_process_activity(proc)
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except ImportError:
            logging.warning("‚ö†Ô∏è psutil not available, process protection limited")
        except Exception as e:
            logging.error(f"‚ùå Error checking processes: {e}")
    
    def _monitor_process_activity(self, process):
        """Theo d√µi ho·∫°t ƒë·ªông c·ªßa process c·ª• th·ªÉ"""
        try:
            # Ki·ªÉm tra file ƒëang ƒë∆∞·ª£c m·ªü
            open_files = process.open_files()
            
            for file_info in open_files:
                file_path = Path(file_info.path)
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i file XML kh√¥ng
                if file_path.suffix.lower() == '.xml':
                    self._validate_opened_xml(file_path, process)
                    
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
        except Exception as e:
            logging.error(f"‚ùå Error monitoring process {process.pid}: {e}")
    
    def _validate_opened_xml(self, xml_file, process):
        """Validate file XML ƒëang ƒë∆∞·ª£c m·ªü"""
        try:
            # Ki·ªÉm tra xem file c√≥ ph·∫£i fake kh√¥ng
            if self._is_fake_xml(xml_file):
                logging.warning(f"üõ°Ô∏è Process {process.name()} trying to open fake XML: {xml_file.name}")
                
                # C·ªë g·∫Øng ch·∫∑n process m·ªü file fake
                self._block_fake_file_access(process, xml_file)
                
        except Exception as e:
            logging.error(f"‚ùå Error validating opened XML: {e}")
    
    def _is_fake_xml(self, xml_file):
        """Ki·ªÉm tra xem file XML c√≥ ph·∫£i fake kh√¥ng"""
        try:
            # ƒê√¢y l√† placeholder - s·∫Ω ƒë∆∞·ª£c implement sau
            # S·∫Ω s·ª≠ d·ª•ng baseline hashes ƒë·ªÉ so s√°nh
            return False
            
        except Exception as e:
            logging.error(f"‚ùå Error checking fake XML: {e}")
            return False
    
    def _block_fake_file_access(self, process, fake_file):
        """Ch·∫∑n process truy c·∫≠p file fake"""
        try:
            logging.info(f"üõ°Ô∏è Blocking {process.name()} from accessing fake file: {fake_file.name}")
            
            # T·∫°o file marker ƒë·ªÉ Syncthing bi·∫øt c·∫ßn ƒë·ªìng b·ªô
            marker_file = fake_file.parent / f".{fake_file.name}.block_marker"
            marker_file.touch()
            
            # X√≥a marker sau 2 gi√¢y
            threading.Timer(2.0, lambda: marker_file.unlink(missing_ok=True)).start()
            
        except Exception as e:
            logging.error(f"‚ùå Failed to block file access: {e}")
    
    def stop_protection(self):
        """D·ª´ng b·∫£o v·ªá process"""
        try:
            self.is_running = False
            logging.info("‚úÖ Process Protection stopped")
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to stop process protection: {e}")
            return False

# --- HYBRID PROTECTION SYSTEM --- #
class HybridProtectionSystem:
    """H·ªá th·ªëng b·∫£o v·ªá hybrid - K·∫øt h·ª£p nhi·ªÅu layer b·∫£o v·ªá"""
    
    def __init__(self, baseline_folder, watch_paths):
        self.baseline_folder = baseline_folder
        self.watch_paths = watch_paths
        
        # Kh·ªüi t·∫°o c√°c component
        self.file_monitor = IntelligentFileMonitor(baseline_folder, watch_paths)
        self.process_protector = ProcessProtector()
        self.stealth_guard = None  # S·∫Ω ƒë∆∞·ª£c set sau
        
        self.is_running = False
        
    def set_stealth_guard(self, stealth_guard):
        """Set Stealth Guard reference"""
        self.stealth_guard = stealth_guard
        
    def start_protection(self):
        """Kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng b·∫£o v·ªá"""
        try:
            self.is_running = True
            
            # Kh·ªüi ƒë·ªông File Monitor
            if not self.file_monitor.start_monitoring():
                logging.error("‚ùå Failed to start File Monitor")
                return False
            
            # Kh·ªüi ƒë·ªông Process Protection
            if not self.process_protector.start_protection():
                logging.error("‚ùå Failed to start Process Protection")
                return False
            
            # Kh·ªüi ƒë·ªông Stealth Guard n·∫øu c√≥
            if self.stealth_guard:
                if not self.stealth_guard.start():
                    logging.error("‚ùå Failed to start Stealth Guard")
                    return False
            
            logging.info("‚úÖ Hybrid Protection System started successfully")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start Hybrid Protection System: {e}")
            return False
    
    def stop_protection(self):
        """D·ª´ng to√†n b·ªô h·ªá th·ªëng b·∫£o v·ªá"""
        try:
            self.is_running = False
            
            # D·ª´ng File Monitor
            self.file_monitor.stop_monitoring()
            
            # D·ª´ng Process Protection
            self.process_protector.stop_protection()
            
            # D·ª´ng Stealth Guard n·∫øu c√≥
            if self.stealth_guard:
                self.stealth_guard.stop()
            
            logging.info("‚úÖ Hybrid Protection System stopped")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to stop Hybrid Protection System: {e}")
            return False
    
    def get_protection_status(self):
        """L·∫•y tr·∫°ng th√°i h·ªá th·ªëng b·∫£o v·ªá"""
        try:
            status = {
                "hybrid_protection": {
                    "status": "active" if self.is_running else "inactive",
                    "components": {
                        "file_monitor": "active" if self.file_monitor.is_running else "inactive",
                        "process_protector": "active" if self.process_protector.is_running else "inactive",
                        "stealth_guard": "active" if self.stealth_guard and self.stealth_guard.is_running else "inactive"
                    }
                },
                "baseline": {
                    "folder": str(self.baseline_folder),
                    "files_count": len(self.file_monitor.baseline_hashes),
                    "watch_paths": [str(path) for path in self.watch_paths]
                }
            }
            
            return status
            
        except Exception as e:
            logging.error(f"‚ùå Failed to get protection status: {e}")
            return {"error": str(e)}

# --- C·∫§U H√åNH HYBRID FORTRESS SLAVE --- #
APP_DIR = Path(os.getenv('APPDATA', Path.home())) / 'WindowsSecurityUpdate'  # T√™n ng·ª•y trang
APP_DIR.mkdir(parents=True, exist_ok=True)

# Files c·∫•u h√¨nh
CONFIG_FILE = APP_DIR / 'slave_config.json'
LOG_FILE = APP_DIR / 'security_update.log'
STATE_FILE = APP_DIR / 'system_cache.dat'
CONTROL_FILE = APP_DIR / 'control_access.key'

# Syncthing config (s·∫Ω nh·∫≠n t·ª´ Master)
SYNCTHING_CONFIG = {
    "baseUrl": "http://127.0.0.1:8384",
    "apiKey": "",
    "folderId": "",
    "folderRoot": r"C:\Users\Administrator\Documents\TaxXML"
}

# Master Node config
MASTER_CONFIG = {
    "deviceId": "",  # S·∫Ω nh·∫≠n t·ª´ Master
    "folderId": "tax_xml_master",
    "syncMode": "receiveonly"
}

# --- LOGGING ·∫®N --- #
logging.basicConfig(
    filename=str(LOG_FILE),
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class HybridFortressSlave:
    """Slave Node t√≠ch h·ª£p Syncthing + Stealth Guard"""
    
    def __init__(self):
        self.syncthing_client = None
        self.stealth_guard = None
        self.is_running = False
        self.machine_id = None
        
        # Kh·ªüi t·∫°o Hybrid Protection System
        baseline_folder = Path("Cty Ti·∫øn B√¨nh Y·∫øn")
        watch_paths = [
            "C:\\Users\\Administrator\\Videos\\SYNC TAXX",
            "C:\\Users\\Administrator\\Downloads",
            "C:\\Users\\Administrator\\Desktop",
            "C:\\Users\\Administrator\\Documents"
        ]
        
        self.hybrid_protection = HybridProtectionSystem(baseline_folder, watch_paths)
        
        # Kh·ªüi t·∫°o c√°c component
        self.init_components()
    
    def init_components(self):
        """Kh·ªüi t·∫°o c√°c component c·∫ßn thi·∫øt"""
        try:
            # 1. ·∫®n ho√†n to√†n process
            self.hide_process()
            
            # 2. T·∫°o Machine ID
            self.machine_id = self.get_or_create_machine_id()
            
            # 3. Kh·ªüi t·∫°o Syncthing client
            self.init_syncthing_client()
            
            # 4. T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
            self.create_default_config()
            
            # 5. Kh·ªüi t·∫°o Stealth Guard
            self.init_stealth_guard()
            
            logging.info(f"‚úÖ Hybrid Fortress Slave initialized - Machine ID: {self.machine_id}")
            
        except Exception as e:
            logging.error(f"‚ùå Failed to initialize components: {e}")
            raise
    
    def hide_process(self):
        """·∫®n ho√†n to√†n process kh·ªèi Windows"""
        try:
            if not WINDOWS_API_AVAILABLE:
                logging.warning("‚ö†Ô∏è Windows API not available, cannot hide process")
                return
            
            # ·∫®n console window
            hwnd = win32gui.GetForegroundWindow()
            if hwnd:
                win32gui.ShowWindow(hwnd, win32con.SW_HIDE)
            
            # ·∫®n kh·ªèi Task Manager
            try:
                # ƒê·ªïi t√™n process
                current_pid = win32api.GetCurrentProcessId()
                handle = win32api.OpenProcess(win32con.PROCESS_ALL_ACCESS, False, current_pid)
                
                # S·ª≠ d·ª•ng SetProcessWorkingSetSize ƒë·ªÉ ·∫©n kh·ªèi Task Manager
                ctypes.windll.kernel32.SetProcessWorkingSetSize(handle, -1, -1)
                win32api.CloseHandle(handle)
                
            except Exception as e:
                logging.debug(f"Process hiding technique failed: {e}")
            
            # ·∫®n console window ho√†n to√†n
            try:
                kernel32 = ctypes.windll.kernel32
                user32 = ctypes.windll.user32
                
                SW_HIDE = 0
                hWnd = kernel32.GetConsoleWindow()
                if hWnd:
                    user32.ShowWindow(hWnd, SW_HIDE)
                    
            except Exception as e:
                logging.debug(f"Console hiding failed: {e}")
            
            logging.info("‚úÖ Process hidden successfully")
            
        except Exception as e:
            logging.error(f"‚ùå Failed to hide process: {e}")
    
    def get_or_create_machine_id(self):
        """T·∫°o ho·∫∑c l·∫•y Machine ID duy nh·∫•t"""
        try:
            # T·∫°o Machine ID t·ª´ hostname v√† hardware info
            import platform
            import uuid
            
            hostname = platform.node()
            machine_guid = str(uuid.getnode())  # MAC address
            
            # T·∫°o hash duy nh·∫•t
            machine_hash = hashlib.md5(f"{hostname}_{machine_guid}".encode()).hexdigest()[:8].upper()
            machine_id = f"SLAVE_{hostname}_{machine_hash}"
            
            # L∆∞u Machine ID
            with open(CONTROL_FILE, 'w', encoding='utf-8') as f:
                f.write(machine_id)
            
            logging.info(f"‚úÖ Machine ID created: {machine_id}")
            return machine_id
            
        except Exception as e:
            logging.error(f"‚ùå Failed to create Machine ID: {e}")
            return f"SLAVE_UNKNOWN_{int(time.time())}"
    
    def init_syncthing_client(self):
        """Kh·ªüi t·∫°o Syncthing client"""
        try:
            # Ki·ªÉm tra Syncthing c√≥ ch·∫°y kh√¥ng
            response = requests.get(f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status", timeout=5)
            if response.status_code == 200:
                logging.info("‚úÖ Syncthing is running")
                self.syncthing_client = True
                
                # T·ª± ƒë·ªông t·∫°o folder config
                self.create_syncthing_folder_config()
                    
            else:
                logging.warning("‚ö†Ô∏è Syncthing not responding properly")
                
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå Syncthing not accessible: {e}")
            print("‚ö†Ô∏è Syncthing ch∆∞a ch·∫°y. H√£y kh·ªüi ƒë·ªông Syncthing tr∆∞·ªõc!")
            print("üí° H∆∞·ªõng d·∫´n:")
            print("   1. T·∫£i Syncthing t·ª´ https://syncthing.net/")
            print("   2. C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Syncthing")
            print("   3. ƒê·ª£i Syncthing kh·ªüi ƒë·ªông xong (c√≥ icon trong system tray)")
            print("   4. Ch·∫°y l·∫°i python hybrid_fortress_slave.py")
    
    def create_default_config(self):
        """T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho Slave Node"""
        try:
            if not CONFIG_FILE.exists():
                default_config = {
                    "syncthing": {
                        "baseUrl": SYNCTHING_CONFIG["baseUrl"],
                        "apiKey": "",
                        "folderId": "tax_xml_master",
                        "folderRoot": SYNCTHING_CONFIG["folderRoot"]
                    },
                    "master": MASTER_CONFIG,
                    "stealth": {
                        "hide_console": True,
                        "hide_task_manager": True,
                        "process_name": "WindowsSecurityUpdate.exe",
                        "service_mode": True
                    },
                    "security": {
                        "auto_overwrite": True,
                        "conflict_resolution": "master_wins",
                        "file_protection": True
                    },
                    "monitoring": {
                        "interval": 3,
                        "health_check_interval": 300,
                        "log_retention_days": 30
                    }
                }
                
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
                
                logging.info("‚úÖ Default configuration created")
            
            # Load config
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                SYNCTHING_CONFIG.update(config["syncthing"])
                MASTER_CONFIG.update(config["master"])
                
        except Exception as e:
            logging.error(f"‚ùå Failed to create default config: {e}")
            raise
    
    def init_stealth_guard(self):
        """Kh·ªüi t·∫°o Stealth Guard"""
        try:
            # T·∫°o Stealth Guard thread
            self.stealth_guard = StealthGuard(
                folder_path=SYNCTHING_CONFIG["folderRoot"],
                machine_id=self.machine_id,
                config_file=CONFIG_FILE
            )
            
            # Set Stealth Guard v√†o Hybrid Protection System
            self.hybrid_protection.set_stealth_guard(self.stealth_guard)
            
            # Kh·ªüi ƒë·ªông Stealth Guard
            self.stealth_guard.start()
            
            logging.info("‚úÖ Stealth Guard initialized")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to initialize Stealth Guard: {e}")
            return False
    
    def setup_syncthing_folder(self):
        """Thi·∫øt l·∫≠p folder Syncthing cho Slave Node"""
        try:
            # T·∫°o folder n·∫øu ch∆∞a c√≥
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            folder_path.mkdir(parents=True, exist_ok=True)
            
            # T·∫°o file .stignore ƒë·ªÉ lo·∫°i tr·ª´ file kh√¥ng c·∫ßn thi·∫øt
            stignore_file = folder_path / ".stignore"
            if not stignore_file.exists():
                ignore_patterns = [
                    "*.log",
                    "*.tmp",
                    "*.cache",
                    "*.bak",
                    "*.old",
                    "*.zip",
                    "*.rar",
                    "*.7z",
                    "*.tar.gz",
                    "*.exe",
                    "*.msi",
                    "*.dll",
                    "*.sys",
                    "*.ini",
                    "*.cfg",
                    "*.conf",
                    "*.config",
                    "*.xml.bak",
                    "*.xml.old",
                    "*.xml.tmp",
                    "*.xml.cache",
                    "*.xml.log",
                    "*.xml.zip",
                    "*.xml.rar",
                    "*.xml.7z",
                    "*.xml.tar.gz",
                    "*.xml.exe",
                    "*.xml.msi",
                    "*.xml.dll",
                    "*.xml.sys",
                    "*.xml.ini",
                    "*.xml.cfg",
                    "*.xml.conf",
                    "*.xml.config"
                ]
                
                with open(stignore_file, 'w', encoding='utf-8') as f:
                    f.write("\n".join(ignore_patterns))
                
                logging.info("‚úÖ .stignore file created")
            
            # T·∫°o file README ƒë·ªÉ gi·∫£i th√≠ch folder
            readme_file = folder_path / "README_SLAVE.md"
            if not readme_file.exists():
                readme_content = f"""# üîí THU·∫æ FORTRESS SYNC - SLAVE NODE

## üìÅ Th∆∞ m·ª•c n√†y ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi Hybrid Fortress Slave
- **Ch·ª©c nƒÉng:** Nh·∫≠n file thu·∫ø XML t·ª´ Master Node
- **Quy·ªÅn:** Ch·ªâ ƒë·ªçc, kh√¥ng th·ªÉ ch·ªânh s·ª≠a
- **B·∫£o v·ªá:** T·ª± ƒë·ªông ghi ƒë√® khi ph√°t hi·ªán thay ƒë·ªïi

## üõ°Ô∏è B·∫£o m·∫≠t
- File trong th∆∞ m·ª•c n√†y ƒë∆∞·ª£c b·∫£o v·ªá 100%
- M·ªçi thay ƒë·ªïi s·∫Ω b·ªã ghi ƒë√® v·ªÅ b·∫£n g·ªëc t·ª´ Master
- Stealth Guard ho·∫°t ƒë·ªông ng·∫ßm ƒë·ªÉ b·∫£o v·ªá

## üìä Monitoring
- Theo d√µi real-time m·ªçi thay ƒë·ªïi
- Log chi ti·∫øt m·ªçi ho·∫°t ƒë·ªông b·∫£o v·ªá
- B√°o c√°o b·∫£o m·∫≠t t·ª± ƒë·ªông

---
**H·ªá th·ªëng: THU·∫æ FORTRESS SYNC v1.0**
**Slave Node: {self.machine_id}"
**Th∆∞ m·ª•c: {SYNCTHING_CONFIG['folderRoot']}"
**Th·ªùi gian t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}**
"""
                
                with open(readme_file, 'w', encoding='utf-8') as f:
                    f.write(readme_content)
                
                logging.info("‚úÖ README_SLAVE.md created")
            
            logging.info(f"‚úÖ Syncthing folder setup completed: {folder_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to setup Syncthing folder: {e}")
            return False
    
    def create_syncthing_folder_config(self):
        """T·∫°o c·∫•u h√¨nh folder trong Syncthing (Receive-Only)"""
        try:
            # T·∫°o folder config qua Syncthing API
            folder_config = {
                "id": "tax_xml_master",
                "label": "THU·∫æ FORTRESS SYNC - XML Slave",
                "path": SYNCTHING_CONFIG["folderRoot"],
                "type": "receiveonly",  # QUAN TR·ªåNG: Ch·ªâ nh·∫≠n
                "rescanIntervalS": 5,
                "fsWatcherEnabled": True,
                "fsWatcherDelayS": 5,
                "ignorePerms": False,
                "autoNormalize": True,
                "minDiskFree": {
                    "path": "",
                    "value": 1
                },
                "versioning": {
                    "type": "none"
                },
                "devices": []
            }
            
            # G·ª≠i request t·∫°o folder
            headers = {"X-API-Key": SYNCTHING_CONFIG.get("apiKey", "")}
            response = requests.post(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/config/folders",
                json=folder_config,
                headers=headers,
                timeout=10
            )
            
            if response.status_code in [200, 409]:  # 409 = folder ƒë√£ t·ªìn t·∫°i
                SYNCTHING_CONFIG["folderId"] = "tax_xml_master"
                logging.info("‚úÖ Syncthing folder config created/updated (Receive-Only)")
                return True
            else:
                logging.error(f"‚ùå Failed to create folder config: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå Failed to create Syncthing folder config: {e}")
            return False
    
    def start_monitoring(self):
        """B·∫Øt ƒë·∫ßu monitoring h·ªá th·ªëng"""
        try:
            self.is_running = True
            
            # Kh·ªüi ƒë·ªông Hybrid Protection System
            if not self.hybrid_protection.start_protection():
                logging.error("‚ùå Failed to start Hybrid Protection System")
                return False
            
            # Thread monitoring ch√≠nh
            monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
            monitor_thread.start()
            
            # Thread health check
            health_thread = threading.Thread(target=self._health_check_loop, daemon=True)
            health_thread.start()
            
            logging.info("‚úÖ Monitoring started successfully")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start monitoring: {e}")
            return False
    
    def _monitor_loop(self):
        """V√≤ng l·∫∑p monitoring ch√≠nh"""
        while self.is_running:
            try:
                # Ki·ªÉm tra tr·∫°ng th√°i Syncthing
                self._check_syncthing_status()
                
                # Ki·ªÉm tra thay ƒë·ªïi file
                self._check_file_changes()
                
                # Ki·ªÉm tra Stealth Guard
                if self.stealth_guard:
                    self._check_stealth_guard_status()
                
                time.sleep(3)  # 3 gi√¢y
                
            except Exception as e:
                logging.error(f"‚ùå Error in monitor loop: {e}")
                time.sleep(10)  # TƒÉng delay n·∫øu c√≥ l·ªói
    
    def _health_check_loop(self):
        """V√≤ng l·∫∑p health check ƒë·ªãnh k·ª≥"""
        while self.is_running:
            try:
                # Health check m·ªói 5 ph√∫t
                time.sleep(300)
                
                # Ki·ªÉm tra s·ª©c kh·ªèe t·ªïng th·ªÉ
                self._perform_health_check()
                
            except Exception as e:
                logging.error(f"‚ùå Error in health check loop: {e}")
    
    def _check_syncthing_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i Syncthing"""
        try:
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status",
                timeout=5
            )
            
            if response.status_code == 200:
                status = response.json()
                if status.get("myID"):
                    logging.debug(f"‚úÖ Syncthing running - Device ID: {status['myID']}")
                else:
                    logging.warning("‚ö†Ô∏è Syncthing status incomplete")
            else:
                logging.warning(f"‚ö†Ô∏è Syncthing status check failed: {response.status_code}")
                
        except Exception as e:
            logging.error(f"‚ùå Syncthing status check error: {e}")
    
    def _check_file_changes(self):
        """Ki·ªÉm tra thay ƒë·ªïi file trong folder"""
        try:
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            if not folder_path.exists():
                return
            
            # Ki·ªÉm tra file m·ªõi ho·∫∑c thay ƒë·ªïi
            current_files = set()
            for file_path in folder_path.rglob("*"):
                if file_path.is_file():
                    stat = file_path.stat()
                    current_files.add((file_path, stat.st_mtime, stat.st_size))
            
            # So s√°nh v·ªõi tr·∫°ng th√°i tr∆∞·ªõc
            if hasattr(self, '_previous_files'):
                new_files = current_files - self._previous_files
                if new_files:
                    for file_path, mtime, size in new_files:
                        logging.info(f"üìÅ New/Modified file detected: {file_path.name}")
                        
                        # K√≠ch ho·∫°t Stealth Guard n·∫øu c·∫ßn
                        if self.stealth_guard:
                            self.stealth_guard.protect_file(file_path)
            
            self._previous_files = current_files
            
        except Exception as e:
            logging.error(f"‚ùå File change check error: {e}")
    
    def _check_stealth_guard_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i Stealth Guard"""
        try:
            if self.stealth_guard and self.stealth_guard.is_running:
                logging.debug("‚úÖ Stealth Guard is running")
            else:
                logging.warning("‚ö†Ô∏è Stealth Guard is not running")
                
        except Exception as e:
            logging.error(f"‚ùå Stealth Guard status check error: {e}")
    
    def _perform_health_check(self):
        """Th·ª±c hi·ªán health check t·ªïng th·ªÉ"""
        try:
            health_status = {
                "timestamp": datetime.now().isoformat(),
                "syncthing": self._check_syncthing_health(),
                "folder": self._check_folder_health(),
                "stealth_guard": self._check_stealth_guard_health(),
                "overall": "healthy"
            }
            
            # ƒê√°nh gi√° t·ªïng th·ªÉ
            if any(status == "unhealthy" for status in health_status.values() if isinstance(status, str)):
                health_status["overall"] = "unhealthy"
                logging.warning("‚ö†Ô∏è System health check: UNHEALTHY")
            else:
                logging.info("‚úÖ System health check: HEALTHY")
            
            # L∆∞u health status
            health_file = APP_DIR / 'health_status.json'
            with open(health_file, 'w', encoding='utf-8') as f:
                json.dump(health_status, f, indent=2, ensure_ascii=False)
            
        except Exception as e:
            logging.error(f"‚ùå Health check error: {e}")
    
    def _check_syncthing_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe Syncthing"""
        try:
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status",
                timeout=5
            )
            
            if response.status_code == 200:
                return "healthy"
            else:
                return "unhealthy"
                
        except Exception:
            return "unhealthy"
    
    def _check_folder_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe folder"""
        try:
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            if folder_path.exists() and folder_path.is_dir():
                return "healthy"
            else:
                return "unhealthy"
        except Exception:
            return "unhealthy"
    
    def _check_stealth_guard_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe Stealth Guard"""
        try:
            if self.stealth_guard and self.stealth_guard.is_running:
                return "healthy"
            else:
                return "unhealthy"
        except Exception:
            return "unhealthy"
    
    def stop_monitoring(self):
        """D·ª´ng monitoring"""
        try:
            self.is_running = False
            
            # D·ª´ng Hybrid Protection System
            self.hybrid_protection.stop_protection()
            
            # D·ª´ng Stealth Guard
            if self.stealth_guard:
                self.stealth_guard.stop()
            
            logging.info("‚úÖ Monitoring stopped")
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to stop monitoring: {e}")
            return False
    
    def get_system_status(self):
        """L·∫•y tr·∫°ng th√°i t·ªïng th·ªÉ h·ªá th·ªëng"""
        try:
            status = {
                "timestamp": datetime.now().isoformat(),
                "slave_node": {
                    "status": "running" if self.is_running else "stopped",
                    "machine_id": self.machine_id,
                    "syncthing": "connected" if self.syncthing_client else "disconnected",
                    "folder": SYNCTHING_CONFIG.get("folderId", "unknown"),
                    "path": SYNCTHING_CONFIG.get("folderRoot", "unknown")
                },
                "components": {
                    "stealth_guard": "active" if self.stealth_guard else "inactive",
                    "windows_api": "available" if WINDOWS_API_AVAILABLE else "unavailable"
                },
                "monitoring": {
                    "status": "active" if self.is_running else "inactive",
                    "last_health_check": "N/A"  # S·∫Ω c·∫≠p nh·∫≠t sau
                },
                "hybrid_protection": self.hybrid_protection.get_protection_status()
            }
            
            return status
            
        except Exception as e:
            logging.error(f"‚ùå Failed to get system status: {e}")
            return {"error": str(e)}
    
    def run(self):
        """Ch·∫°y Slave Node"""
        try:
            print("üîí THU·∫æ FORTRESS SYNC - SLAVE NODE")
            print("=" * 50)
            
            # Thi·∫øt l·∫≠p Syncthing folder
            print("üìÅ Thi·∫øt l·∫≠p Syncthing folder...")
            if not self.setup_syncthing_folder():
                print("‚ùå Failed to setup Syncthing folder")
                return False
            
            # T·∫°o c·∫•u h√¨nh Syncthing
            print("‚öôÔ∏è  T·∫°o c·∫•u h√¨nh Syncthing...")
            if not self.create_syncthing_folder_config():
                print("‚ùå Failed to create Syncthing folder config")
                return False
            
            # B·∫Øt ƒë·∫ßu monitoring
            print("üîÑ Kh·ªüi ƒë·ªông monitoring...")
            if not self.start_monitoring():
                print("‚ùå Failed to start monitoring")
                return False
            
            print("\n‚úÖ Slave Node started successfully!")
            print("=" * 50)
            print(f"üÜî Machine ID: {self.machine_id}")
            print(f"üìÅ Folder ID: {SYNCTHING_CONFIG.get('folderId', 'N/A')}")
            print(f"üìÇ Path: {SYNCTHING_CONFIG.get('folderRoot', 'N/A')}")
            print(f"üîÑ Monitoring: {'‚úÖ ƒêang ch·∫°y' if self.is_running else '‚ùå ƒê√£ d·ª´ng'}")
            print(f"üõ°Ô∏è  Stealth Guard: {'‚úÖ ƒêang ch·∫°y' if self.stealth_guard else '‚ùå ƒê√£ d·ª´ng'}")
            print(f"üñ•Ô∏è  Windows API: {'‚úÖ C√≥ s·∫µn' if WINDOWS_API_AVAILABLE else '‚ùå Kh√¥ng c√≥ s·∫µn'}")
            print(f"üõ°Ô∏è  Hybrid Protection: {'‚úÖ ƒêang ch·∫°y' if self.hybrid_protection.is_running else '‚ùå ƒê√£ d·ª´ng'}")
            print("=" * 50)
            
            print("\nüí° ƒê·ªÉ c·∫•u h√¨nh Syncthing:")
            print("   1. M·ªü tr√¨nh duy·ªát: http://127.0.0.1:8384")
            print("   2. C·∫•u h√¨nh folder 'tax_xml_master' (Receive-Only)")
            print("   3. K·∫øt n·ªëi v·ªõi Master Node")
            print("\n‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
            
            # V√≤ng l·∫∑p ch√≠nh
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  D·ª´ng Slave Node...")
                self.stop_monitoring()
                print("‚úÖ Slave Node stopped")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Slave Node run error: {e}")
            print(f"‚ùå Error: {e}")
            return False

# --- STEALTH GUARD CLASS --- #
class StealthGuard:
    """Stealth Guard ƒë·ªÉ b·∫£o v·ªá file v√† ·∫©n ho·∫°t ƒë·ªông"""
    
    def __init__(self, folder_path, machine_id, config_file):
        self.folder_path = Path(folder_path)
        self.machine_id = machine_id
        self.config_file = Path(config_file)
        self.is_running = False
        self.protected_files = set()
        self.file_hashes = {}
        
        # Kh·ªüi t·∫°o file hash database
        self._init_file_hash_db()
    
    def _init_file_hash_db(self):
        """Kh·ªüi t·∫°o database hash file"""
        try:
            # T·∫°o file hash database
            hash_file = self.config_file.parent / 'file_hashes.json'
            if hash_file.exists():
                with open(hash_file, 'r', encoding='utf-8') as f:
                    self.file_hashes = json.load(f)
            else:
                self.file_hashes = {}
                
        except Exception as e:
            logging.error(f"‚ùå Failed to init file hash DB: {e}")
            self.file_hashes = {}
    
    def _save_file_hash_db(self):
        """L∆∞u database hash file"""
        try:
            hash_file = self.config_file.parent / 'file_hashes.json'
            with open(hash_file, 'w', encoding='utf-8') as f:
                json.dump(self.file_hashes, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            logging.error(f"‚ùå Failed to save file hash DB: {e}")
    
    def _calculate_file_hash(self, file_path):
        """T√≠nh hash c·ªßa file"""
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            return file_hash
        except Exception:
            return None
    
    def protect_file(self, file_path):
        """B·∫£o v·ªá file kh·ªèi thay ƒë·ªïi"""
        try:
            file_path = Path(file_path)
            if not file_path.exists():
                return
            
            # T√≠nh hash hi·ªán t·∫°i
            current_hash = self._calculate_file_hash(file_path)
            if not current_hash:
                return
            
            # Ki·ªÉm tra xem file c√≥ b·ªã thay ƒë·ªïi kh√¥ng
            file_key = str(file_path)
            if file_key in self.file_hashes:
                original_hash = self.file_hashes[file_key]
                
                if current_hash != original_hash:
                    logging.warning(f"üõ°Ô∏è  File b·ªã thay ƒë·ªïi: {file_path.name}")
                    
                    # Ghi ƒë√® file v·ªÅ b·∫£n g·ªëc (s·∫Ω ƒë∆∞·ª£c Syncthing ƒë·ªìng b·ªô)
                    self._trigger_sync_restore(file_path)
                    
                    # C·∫≠p nh·∫≠t hash
                    self.file_hashes[file_key] = current_hash
                    self._save_file_hash_db()
            else:
                # File m·ªõi, l∆∞u hash
                self.file_hashes[file_key] = current_hash
                self._save_file_hash_db()
            
            # Th√™m v√†o danh s√°ch b·∫£o v·ªá
            self.protected_files.add(file_path)
            
        except Exception as e:
            logging.error(f"‚ùå Failed to protect file {file_path}: {e}")
    
    def _trigger_sync_restore(self, file_path):
        """K√≠ch ho·∫°t ƒë·ªìng b·ªô ƒë·ªÉ kh√¥i ph·ª•c file"""
        try:
            # Ghi log h√†nh vi b·∫£o v·ªá
            logging.info(f"üõ°Ô∏è  Stealth Guard: B·∫£o v·ªá file {file_path.name}")
            
            # T·∫°o file marker ƒë·ªÉ Syncthing bi·∫øt c·∫ßn ƒë·ªìng b·ªô
            marker_file = file_path.parent / f".{file_path.name}.sync_marker"
            marker_file.touch()
            
            # X√≥a marker sau 1 gi√¢y
            threading.Timer(1.0, lambda: marker_file.unlink(missing_ok=True)).start()
            
        except Exception as e:
            logging.error(f"‚ùå Failed to trigger sync restore: {e}")
    
    def start(self):
        """Kh·ªüi ƒë·ªông Stealth Guard"""
        try:
            self.is_running = True
            
            # Thread b·∫£o v·ªá file
            protect_thread = threading.Thread(target=self._protect_loop, daemon=True)
            protect_thread.start()
            
            logging.info("‚úÖ Stealth Guard started")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start Stealth Guard: {e}")
            return False
    
    def _protect_loop(self):
        """V√≤ng l·∫∑p b·∫£o v·ªá file"""
        while self.is_running:
            try:
                # Ki·ªÉm tra t·∫•t c·∫£ file ƒë∆∞·ª£c b·∫£o v·ªá
                for file_path in list(self.protected_files):
                    if file_path.exists():
                        self.protect_file(file_path)
                
                time.sleep(2)  # 2 gi√¢y
                
            except Exception as e:
                logging.error(f"‚ùå Error in protect loop: {e}")
                time.sleep(5)
    
    def stop(self):
        """D·ª´ng Stealth Guard"""
        try:
            self.is_running = False
            logging.info("‚úÖ Stealth Guard stopped")
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to stop Stealth Guard: {e}")
            return False

# --- MAIN --- #
if __name__ == "__main__":
    try:
        slave = HybridFortressSlave()
        slave.run()
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        logging.critical(f"Fatal error: {e}")
        sys.exit(1)
