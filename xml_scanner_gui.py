#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML SCANNER & CLASSIFIER - THU·∫æ FORTRESS SYNC
Tool GUI ƒë·∫πp, hi·ªán ƒë·∫°i ƒë·ªÉ qu√©t v√† ph√¢n lo·∫°i file XML theo doanh nghi·ªáp
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import sys
import json
import hashlib
import xml.etree.ElementTree as ET
from pathlib import Path
from datetime import datetime
import threading
import requests
from collections import defaultdict

class ModernXMLScannerGUI:
    """GUI hi·ªán ƒë·∫°i cho XML Scanner & Classifier"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ XML SCANNER & CLASSIFIER - THU·∫æ FORTRESS SYNC")
        self.root.geometry("1400x900")
        self.root.configure(bg='#1a1a2e')
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.scan_results = {}
        self.company_groups = defaultdict(list)
        self.tax_form_types = defaultdict(list)
        self.selected_fields = {
            'mst': True,
            'company_name': True,
            'tax_form_type': True,
            'period': True,
            'declaration_number': True
        }
        
        # C·∫•u h√¨nh style hi·ªán ƒë·∫°i
        self.setup_modern_styles()
        
        # T·∫°o giao di·ªán
        self.create_modern_widgets()
        
        # Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
        self.load_sample_data()
        
    def setup_modern_styles(self):
        """Thi·∫øt l·∫≠p style hi·ªán ƒë·∫°i cho GUI"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # C·∫•u h√¨nh style hi·ªán ƒë·∫°i
        style.configure('Modern.TFrame', 
                       background='#1a1a2e')
        
        style.configure('Card.TFrame', 
                       background='#16213e',
                       relief='flat',
                       borderwidth=2)
        
        style.configure('Title.TLabel', 
                       font=('Segoe UI', 24, 'bold'), 
                       foreground='#00d4ff',
                       background='#1a1a2e')
        
        style.configure('Subtitle.TLabel', 
                       font=('Segoe UI', 14), 
                       foreground='#ffffff',
                       background='#1a1a2e')
        
        style.configure('Header.TLabel', 
                       font=('Segoe UI', 12, 'bold'), 
                       foreground='#00ff88',
                       background='#16213e')
        
        style.configure('Info.TLabel', 
                       font=('Segoe UI', 10), 
                       foreground='#cccccc',
                       background='#16213e')
        
        style.configure('Modern.TButton', 
                       font=('Segoe UI', 11, 'bold'),
                       background='#0f3460',
                       foreground='#ffffff',
                       relief='flat',
                       borderwidth=0)
        
        style.map('Modern.TButton',
                 background=[('active', '#533483')])
    
    def create_modern_widgets(self):
        """T·∫°o c√°c widget hi·ªán ƒë·∫°i cho GUI"""
        # Title v·ªõi gradient effect
        title_frame = ttk.Frame(self.root, style='Modern.TFrame')
        title_frame.pack(fill='x', pady=20)
        
        title_label = ttk.Label(title_frame, 
                               text="üöÄ XML SCANNER & CLASSIFIER", 
                               style='Title.TLabel')
        title_label.pack()
        
        subtitle_label = ttk.Label(title_frame, 
                                  text="Tool th√¥ng minh qu√©t v√† ph√¢n lo·∫°i file XML theo doanh nghi·ªáp", 
                                  style='Subtitle.TLabel')
        subtitle_label.pack(pady=5)
        
        # Main Container v·ªõi modern layout
        main_container = ttk.Frame(self.root, style='Modern.TFrame')
        main_container.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Left Panel - Control & Configuration
        left_panel = self.create_left_panel(main_container)
        left_panel.pack(side='left', fill='y', padx=(0, 10))
        
        # Right Panel - Results & Dashboard
        right_panel = self.create_right_panel(main_container)
        right_panel.pack(side='right', fill='both', expand=True, padx=(10, 0))
        
        # Status bar hi·ªán ƒë·∫°i
        self.create_modern_status_bar()
        
        # Progress bar v·ªõi animation
        self.create_progress_section()
    
    def create_left_panel(self, parent):
        """T·∫°o panel tr√°i - Control & Configuration"""
        left_frame = ttk.LabelFrame(parent, text="üéõÔ∏è ƒêI·ªÄU KHI·ªÇN & C·∫§U H√åNH", 
                                   padding=15, style='Card.TFrame')
        
        # Scan Control Section
        scan_frame = ttk.LabelFrame(left_frame, text="üîç QU√âT & PH√ÇN LO·∫†I", 
                                   padding=10, style='Card.TFrame')
        scan_frame.pack(fill='x', pady=(0, 15))
        
        # Scan buttons v·ªõi modern design
        btn_frame = ttk.Frame(scan_frame)
        btn_frame.pack(fill='x', pady=5)
        
        scan_btn = ttk.Button(btn_frame, text="üöÄ QU√âT TH√îNG MINH", 
                             command=self.start_smart_scan, style='Modern.TButton')
        scan_btn.pack(fill='x', pady=5)
        
        folder_btn = ttk.Button(btn_frame, text="üìÅ CH·ªåN TH∆Ø M·ª§C", 
                               command=self.select_folder, style='Modern.TButton')
        folder_btn.pack(fill='x', pady=5)
        
        clear_btn = ttk.Button(btn_frame, text="üóëÔ∏è X√ìA K·∫æT QU·∫¢", 
                              command=self.clear_results, style='Modern.TButton')
        clear_btn.pack(fill='x', pady=5)
        
        # Field Selection Section
        fields_frame = ttk.LabelFrame(left_frame, text="‚öôÔ∏è CH·ªåN TR∆Ø·ªúNG ƒê·ªäNH DANH", 
                                     padding=10, style='Card.TFrame')
        fields_frame.pack(fill='x', pady=(0, 15))
        
        # Checkboxes cho c√°c tr∆∞·ªùng
        self.mst_var = tk.BooleanVar(value=True)
        self.company_var = tk.BooleanVar(value=True)
        self.form_type_var = tk.BooleanVar(value=True)
        self.period_var = tk.BooleanVar(value=True)
        self.declaration_var = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(fields_frame, text="üè¢ MST (M√£ s·ªë thu·∫ø)", 
                       variable=self.mst_var, style='Info.TLabel').pack(anchor='w', pady=2)
        ttk.Checkbutton(fields_frame, text="üè≠ T√™n doanh nghi·ªáp", 
                       variable=self.company_var, style='Info.TLabel').pack(anchor='w', pady=2)
        ttk.Checkbutton(fields_frame, text="üìã Lo·∫°i t·ªù khai", 
                       variable=self.form_type_var, style='Info.TLabel').pack(anchor='w', pady=2)
        ttk.Checkbutton(fields_frame, text="üìÖ K·ª≥ khai", 
                       variable=self.period_var, style='Info.TLabel').pack(anchor='w', pady=2)
        ttk.Checkbutton(fields_frame, text="üî¢ S·ªë t·ªù khai", 
                       variable=self.declaration_var, style='Info.TLabel').pack(anchor='w', pady=2)
        
        # Export Section
        export_frame = ttk.LabelFrame(left_frame, text="üì§ XU·∫§T D·ªÆ LI·ªÜU", 
                                     padding=10, style='Card.TFrame')
        export_frame.pack(fill='x', pady=(0, 15))
        
        export_btn = ttk.Button(export_frame, text="üìä XU·∫§T B√ÅO C√ÅO", 
                               command=self.export_report, style='Modern.TButton')
        export_btn.pack(fill='x', pady=5)
        
        return left_frame
    
    def create_right_panel(self, parent):
        """T·∫°o panel ph·∫£i - Results & Dashboard"""
        right_frame = ttk.Frame(parent, style='Modern.TFrame')
        
        # Dashboard Header
        dashboard_header = ttk.LabelFrame(right_frame, text="üìä DASHBOARD T·ªîNG QUAN", 
                                        padding=15, style='Card.TFrame')
        dashboard_header.pack(fill='x', pady=(0, 15))
        
        # Statistics cards
        stats_frame = ttk.Frame(dashboard_header)
        stats_frame.pack(fill='x')
        
        self.total_files_label = ttk.Label(stats_frame, text="üìÅ T·ªïng file: 0", 
                                          style='Header.TLabel')
        self.total_files_label.pack(side='left', padx=10)
        
        self.total_companies_label = ttk.Label(stats_frame, text="üè¢ Doanh nghi·ªáp: 0", 
                                              style='Header.TLabel')
        self.total_companies_label.pack(side='left', padx=10)
        
        self.total_forms_label = ttk.Label(stats_frame, text="üìã Lo·∫°i t·ªù khai: 0", 
                                          style='Header.TLabel')
        self.total_forms_label.pack(side='left', padx=10)
        
        # Results Display
        results_frame = ttk.LabelFrame(right_frame, text="üéØ K·∫æT QU·∫¢ PH√ÇN LO·∫†I", 
                                      padding=15, style='Card.TFrame')
        results_frame.pack(fill='both', expand=True)
        
        # Notebook cho tabbed interface
        self.notebook = ttk.Notebook(results_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # Tab 1: Ph√¢n lo·∫°i theo doanh nghi·ªáp
        self.companies_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.companies_tab, text="üè¢ THEO DOANH NGHI·ªÜP")
        
        # Companies treeview
        self.companies_tree = ttk.Treeview(self.companies_tab, columns=('MST', 'T√™n', 'S·ªë file', 'Lo·∫°i t·ªù khai'), 
                                          show='tree headings', height=15)
        self.companies_tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Tab 2: Ph√¢n lo·∫°i theo lo·∫°i t·ªù khai
        self.forms_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.forms_tab, text="üìã THEO LO·∫†I T·ªú KHAI")
        
        # Forms treeview
        self.forms_tree = ttk.Treeview(self.forms_tab, columns=('Lo·∫°i', 'S·ªë l∆∞·ª£ng', 'Doanh nghi·ªáp'), 
                                      show='tree headings', height=15)
        self.forms_tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Tab 3: Chi ti·∫øt file
        self.files_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.files_tab, text="üìÅ CHI TI·∫æT FILE")
        
        # Files listbox
        self.files_listbox = tk.Listbox(self.files_tab, bg='#16213e', fg='#ffffff', 
                                       selectmode='extended', height=15)
        self.files_listbox.pack(fill='both', expand=True, padx=10, pady=10)
        
        return right_frame
    
    def create_modern_status_bar(self):
        """T·∫°o status bar hi·ªán ƒë·∫°i"""
        status_frame = ttk.Frame(self.root, style='Card.TFrame')
        status_frame.pack(side='bottom', fill='x', padx=20, pady=5)
        
        self.status_var = tk.StringVar()
        self.status_var.set("üöÄ S·∫µn s√†ng qu√©t v√† ph√¢n lo·∫°i file XML...")
        
        status_label = ttk.Label(status_frame, textvariable=self.status_var, 
                                style='Info.TLabel')
        status_label.pack(side='left', padx=10, pady=5)
        
        # Time display
        self.time_var = tk.StringVar()
        self.time_var.set(datetime.now().strftime("%H:%M:%S"))
        time_label = ttk.Label(status_frame, textvariable=self.time_var, 
                              style='Info.TLabel')
        time_label.pack(side='right', padx=10, pady=5)
        
        # Update time
        self.update_time()
    
    def create_progress_section(self):
        """T·∫°o section progress v·ªõi animation"""
        progress_frame = ttk.Frame(self.root, style='Modern.TFrame')
        progress_frame.pack(side='bottom', fill='x', padx=20, pady=5)
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(progress_frame, variable=self.progress_var, 
                                           maximum=100, length=400)
        self.progress_bar.pack(fill='x')
        
        self.progress_label = ttk.Label(progress_frame, text="0%", 
                                       style='Info.TLabel')
        self.progress_label.pack(pady=2)
    
    def update_time(self):
        """C·∫≠p nh·∫≠t th·ªùi gian"""
        self.time_var.set(datetime.now().strftime("%H:%M:%S"))
        self.root.after(1000, self.update_time)
    
    def load_sample_data(self):
        """Load d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo"""
        # D·ªØ li·ªáu m·∫´u cho demo
        sample_data = {
            'companies': [
                {'mst': '0123456789', 'name': 'Cty Ti·∫øn B√¨nh Y·∫øn', 'files': 5, 'forms': ['Th√¥ng b√°o thu·∫ø A', 'T·ªù khai thu·∫ø']},
                {'mst': '0987654321', 'name': 'Cty ABC', 'files': 3, 'forms': ['T·ªù khai thu·∫ø', 'B√°o c√°o thu·∫ø']},
                {'mst': '1122334455', 'name': 'Cty XYZ', 'files': 2, 'forms': ['Th√¥ng b√°o thu·∫ø A']}
            ],
            'forms': [
                {'type': 'Th√¥ng b√°o thu·∫ø A', 'count': 2, 'companies': ['Cty Ti·∫øn B√¨nh Y·∫øn', 'Cty XYZ']},
                {'type': 'T·ªù khai thu·∫ø', 'count': 2, 'companies': ['Cty Ti·∫øn B√¨nh Y·∫øn', 'Cty ABC']},
                {'type': 'B√°o c√°o thu·∫ø', 'count': 1, 'companies': ['Cty ABC']}
            ]
        }
        
        self.update_dashboard(sample_data)
    
    def update_dashboard(self, data):
        """C·∫≠p nh·∫≠t dashboard v·ªõi d·ªØ li·ªáu"""
        # Update statistics
        total_files = sum(company['files'] for company in data['companies'])
        total_companies = len(data['companies'])
        total_forms = len(data['forms'])
        
        self.total_files_label.config(text=f"üìÅ T·ªïng file: {total_files}")
        self.total_companies_label.config(text=f"üè¢ Doanh nghi·ªáp: {total_companies}")
        self.total_forms_label.config(text=f"üìã Lo·∫°i t·ªù khai: {total_forms}")
        
        # Update companies tree
        self.companies_tree.delete(*self.companies_tree.get_children())
        for company in data['companies']:
            self.companies_tree.insert('', 'end', text=company['name'], 
                                     values=(company['mst'], company['name'], 
                                            company['files'], ', '.join(company['forms'])))
        
        # Update forms tree
        self.forms_tree.delete(*self.forms_tree.get_children())
        for form in data['forms']:
            self.forms_tree.insert('', 'end', text=form['type'], 
                                 values=(form['type'], form['count'], 
                                        ', '.join(form['companies'])))
    
    def select_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ƒë·ªÉ qu√©t"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a file XML")
        if folder:
            self.status_var.set(f"üìÅ ƒê√£ ch·ªçn th∆∞ m·ª•c: {os.path.basename(folder)}")
            self.scan_folder = folder
    
    def start_smart_scan(self):
        """B·∫Øt ƒë·∫ßu qu√©t th√¥ng minh"""
        if not hasattr(self, 'scan_folder'):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ qu√©t tr∆∞·ªõc!")
            return
        
        # Start scanning in separate thread
        scan_thread = threading.Thread(target=self._smart_scan_files, daemon=True)
        scan_thread.start()
    
    def _smart_scan_files(self):
        """Qu√©t file th√¥ng minh trong thread ri√™ng"""
        try:
            self.root.after(0, lambda: self.status_var.set("üîç ƒêang qu√©t file XML..."))
            self.root.after(0, lambda: self.progress_var.set(0))
            
            # Scan XML files
            xml_files = list(Path(self.scan_folder).rglob("*.xml"))
            total_files = len(xml_files)
            
            if total_files == 0:
                self.root.after(0, lambda: messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y file XML n√†o!"))
                return
            
            # Process each file
            for i, xml_file in enumerate(xml_files):
                try:
                    # Update progress
                    progress = (i + 1) / total_files * 100
                    self.root.after(0, lambda p=progress: self.progress_var.set(p))
                    self.root.after(0, lambda p=int(progress): self.progress_label.config(text=f"{p}%"))
                    
                    # Update status
                    self.root.after(0, lambda f=os.path.basename(xml_file): 
                                  self.status_var.set(f"üîç ƒêang qu√©t: {f}"))
                    
                    # Process file
                    file_info = self._process_xml_file(xml_file)
                    if file_info:
                        self._add_to_results(file_info)
                    
                except Exception as e:
                    print(f"Error processing {xml_file}: {e}")
            
            # Scan completed
            self.root.after(0, lambda: self._scan_completed())
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói khi qu√©t: {e}"))
    
    def _process_xml_file(self, file_path):
        """X·ª≠ l√Ω m·ªôt file XML v·ªõi logic c·∫£i ti·∫øn"""
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            
            # Extract basic info
            file_info = {
                'path': str(file_path),
                'name': file_path.name,
                'size': file_path.stat().st_size,
                'modified': datetime.fromtimestamp(file_path.stat().st_mtime)
            }
            
            # C·∫£i ti·∫øn: Tr√≠ch xu·∫•t th√¥ng tin v·ªõi logic th√¥ng minh h∆°n
            all_tags = {}
            for elem in root.iter():
                tag = elem.tag.lower()
                text = elem.text.strip() if elem.text else ""
                
                # L∆∞u t·∫•t c·∫£ tag ƒë·ªÉ ph√¢n t√≠ch
                if text:
                    all_tags[tag] = text
            
            # 1. Tr√≠ch xu·∫•t MST - Logic c·∫£i ti·∫øn
            mst_candidates = []
            for tag, text in all_tags.items():
                if 'mst' in tag or 'masothue' in tag or 'taxcode' in tag:
                    mst_candidates.append(text)
                elif len(text) == 10 and text.isdigit():  # MST th∆∞·ªùng c√≥ 10 s·ªë
                    mst_candidates.append(text)
            
            if mst_candidates:
                file_info['mst'] = mst_candidates[0]
            
            # 2. Tr√≠ch xu·∫•t t√™n doanh nghi·ªáp - Logic c·∫£i ti·∫øn
            company_candidates = []
            for tag, text in all_tags.items():
                if any(keyword in tag for keyword in ['tennnt', 'tencty', 'tendoanhnghiep', 'companyname']):
                    company_candidates.append(text)
                elif any(keyword in text.lower() for keyword in ['c√¥ng ty', 'cty', 'tnhh', 'jsc', 'co ltd']):
                    company_candidates.append(text)
            
            if company_candidates:
                file_info['company_name'] = company_candidates[0]
            
            # 3. Tr√≠ch xu·∫•t lo·∫°i t·ªù khai - Logic c·∫£i ti·∫øn
            form_type = self._detect_tax_form_type(all_tags, file_path.name)
            file_info['form_type'] = form_type
            
            # 4. Tr√≠ch xu·∫•t k·ª≥ khai - Logic c·∫£i ti·∫øn
            period_candidates = []
            for tag, text in all_tags.items():
                if any(keyword in tag for keyword in ['kykhai', 'kybaocao', 'period', 'thang', 'quy', 'nam']):
                    period_candidates.append(text)
                elif any(keyword in text.lower() for keyword in ['th√°ng', 'qu√Ω', 'nƒÉm', '2024', '2025']):
                    period_candidates.append(text)
            
            if period_candidates:
                file_info['period'] = period_candidates[0]
            
            # 5. Tr√≠ch xu·∫•t s·ªë t·ªù khai - Logic c·∫£i ti·∫øn
            declaration_candidates = []
            for tag, text in all_tags.items():
                if any(keyword in tag for keyword in ['sotk', 'matkhai', 'declaration', 'sochungtu']):
                    declaration_candidates.append(text)
                elif text.startswith('ETAX') or text.startswith('HTKK'):  # Pattern ph·ªï bi·∫øn
                    declaration_candidates.append(text)
            
            if declaration_candidates:
                file_info['declaration_number'] = declaration_candidates[0]
            
            return file_info
            
        except Exception as e:
            print(f"Error processing XML {file_path}: {e}")
            return None
    
    def _detect_tax_form_type(self, all_tags, filename):
        """Ph√°t hi·ªán lo·∫°i t·ªù khai th√¥ng minh"""
        try:
            # Ph√¢n t√≠ch filename tr∆∞·ªõc
            filename_lower = filename.lower()
            
            # 1. Ph√¢n t√≠ch theo filename pattern
            if 'etax' in filename_lower:
                if '113' in filename_lower:
                    return "T·ªù khai thu·∫ø GTGT (ETAX113)"
                elif '01' in filename_lower:
                    return "T·ªù khai thu·∫ø TNDN (ETAX01)"
                elif '02' in filename_lower:
                    return "T·ªù khai thu·∫ø TNCN (ETAX02)"
                else:
                    return "T·ªù khai thu·∫ø (ETAX)"
            
            if 'htkk' in filename_lower:
                return "T·ªù khai HTKK"
            
            if 'fake' in filename_lower:
                return "‚ö†Ô∏è FILE FAKE"
            
            # 2. Ph√¢n t√≠ch theo n·ªôi dung XML
            content_text = ' '.join(all_tags.values()).lower()
            
            # T√¨m t·ª´ kh√≥a trong n·ªôi dung
            if 'th√¥ng b√°o thu·∫ø' in content_text:
                return "Th√¥ng b√°o thu·∫ø"
            
            if 't·ªù khai thu·∫ø' in content_text:
                if 'gtgt' in content_text or 'gi√° tr·ªã gia tƒÉng' in content_text:
                    return "T·ªù khai thu·∫ø GTGT"
                elif 'tndn' in content_text or 'thu nh·∫≠p doanh nghi·ªáp' in content_text:
                    return "T·ªù khai thu·∫ø TNDN"
                elif 'tncn' in content_text or 'thu nh·∫≠p c√° nh√¢n' in content_text:
                    return "T·ªù khai thu·∫ø TNCN"
                else:
                    return "T·ªù khai thu·∫ø"
            
            if 'b√°o c√°o thu·∫ø' in content_text:
                return "B√°o c√°o thu·∫ø"
            
            if 'quy·∫øt to√°n thu·∫ø' in content_text:
                return "Quy·∫øt to√°n thu·∫ø"
            
            # 3. Ph√¢n t√≠ch theo tag c·ª• th·ªÉ
            for tag, text in all_tags.items():
                tag_lower = tag.lower()
                text_lower = text.lower()
                
                if 'loaikhai' in tag_lower or 'loaitt' in tag_lower:
                    if text:
                        return f"Lo·∫°i: {text}"
                
                if 'tenmau' in tag_lower or 'maukhai' in tag_lower:
                    if text:
                        return f"M·∫´u: {text}"
                
                if 'kykhai' in tag_lower:
                    if text:
                        return f"K·ª≥ khai: {text}"
            
            # 4. Ph√¢n t√≠ch theo c·∫•u tr√∫c XML
            if len(all_tags) < 10:
                return "XML ƒë∆°n gi·∫£n"
            elif len(all_tags) < 50:
                return "XML trung b√¨nh"
            else:
                return "XML ph·ª©c t·∫°p"
                
        except Exception as e:
            print(f"Error detecting form type: {e}")
            return "Unknown"
    
    def _add_to_results(self, file_info):
        """Th√™m file v√†o k·∫øt qu·∫£ ph√¢n lo·∫°i"""
        # Group by MST
        mst = file_info.get('mst', 'Unknown')
        if mst not in self.company_groups:
            self.company_groups[mst] = []
        self.company_groups[mst].append(file_info)
        
        # Group by form type
        form_type = file_info.get('form_type', 'Unknown')
        if form_type not in self.tax_form_types:
            self.tax_form_types[form_type] = []
        self.tax_form_types[form_type].append(file_info)
    
    def _scan_completed(self):
        """Ho√†n th√†nh qu√©t"""
        try:
            # Update dashboard
            self._update_results_display()
            
            # Update status
            total_files = sum(len(files) for files in self.company_groups.values())
            self.status_var.set(f"‚úÖ Ho√†n th√†nh qu√©t {total_files} file XML")
            self.progress_var.set(100)
            self.progress_label.config(text="100%")
            
            # Show completion message
            messagebox.showinfo("Ho√†n th√†nh", 
                              f"Qu√©t ho√†n th√†nh!\nPh√°t hi·ªán {len(self.company_groups)} doanh nghi·ªáp\nT·ªïng c·ªông {total_files} file XML")
                
        except Exception as e:
            print(f"Error in scan completion: {e}")
    
    def _update_results_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã k·∫øt qu·∫£"""
        # Update companies tab
        self.companies_tree.delete(*self.companies_tree.get_children())
        for mst, files in self.company_groups.items():
            company_name = files[0].get('company_name', 'Unknown') if files else 'Unknown'
            form_types = list(set(f.get('form_type', 'Unknown') for f in files))
            
            self.companies_tree.insert('', 'end', text=company_name, 
                                     values=(mst, company_name, len(files), ', '.join(form_types)))
        
        # Update forms tab
        self.forms_tree.delete(*self.forms_tree.get_children())
        for form_type, files in self.tax_form_types.items():
            companies = list(set(f.get('company_name', 'Unknown') for f in files))
            
            self.forms_tree.insert('', 'end', text=form_type, 
                                 values=(form_type, len(files), ', '.join(companies)))
        
        # Update files tab
        self.files_listbox.delete(0, tk.END)
        for mst, files in self.company_groups.items():
            for file_info in files:
                display_text = f"üè¢ {file_info.get('company_name', 'Unknown')} | üìÅ {file_info['name']} | üìã {file_info.get('form_type', 'Unknown')}"
                self.files_listbox.insert(tk.END, display_text)
    
    def clear_results(self):
        """X√≥a k·∫øt qu·∫£"""
        self.company_groups.clear()
        self.tax_form_types.clear()
        self._update_results_display()
        self.status_var.set("üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ k·∫øt qu·∫£")
        self.progress_var.set(0)
        self.progress_label.config(text="0%")
    
    def export_report(self):
        """Xu·∫•t b√°o c√°o"""
        if not self.company_groups:
            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!")
            return
        
        try:
            # Create report data
            report_data = {
                'scan_time': datetime.now().isoformat(),
                'total_companies': len(self.company_groups),
                'total_files': sum(len(files) for files in self.company_groups.values()),
                'companies': dict(self.company_groups),
                'forms': dict(self.tax_form_types)
            }
            
            # Save report
            report_file = f"xml_scan_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t b√°o c√°o: {report_file}")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o: {e}")

def main():
    """H√†m main"""
    try:
        root = tk.Tk()
        app = ModernXMLScannerGUI(root)
        
        # Center window
        root.update_idletasks()
        width = root.winfo_width()
        height = root.winfo_height()
        x = (root.winfo_screenwidth() // 2) - (width // 2)
        y = (root.winfo_screenheight() // 2) - (height // 2)
        root.geometry(f'{width}x{height}+{x}+{y}')
        
        root.mainloop()
        
    except Exception as e:
        print(f"Fatal error: {e}")
        messagebox.showerror("L·ªói nghi√™m tr·ªçng", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")

if __name__ == "__main__":
    main()
