using AntiFakeXML.Core;
using System.Diagnostics;
using System.ServiceProcess;

namespace TestCases;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("üß™ ANTI-FAKE XML P1 - TEST THEO 10 TEST CASE");
        Console.WriteLine(new string('=', 60));
        
        var testRunner = new TestRunner();
        await testRunner.RunAllTests();
        
        Console.WriteLine("\nüéâ HO√ÄN TH√ÄNH T·∫§T C·∫¢ TEST CASE!");
        Console.WriteLine("Nh·∫•n Enter ƒë·ªÉ tho√°t...");
        Console.ReadLine();
    }
}

public class TestRunner
{
    private readonly string _xmlOriginalPath = @"cty B√¨nh Nguy·ªÖn Derco\ETAX11320240281480150.xml";
    private readonly AppConfig _cfg = new();
    
    public async Task RunAllTests()
    {
        // Load manifest
        ManifestValidator.Load(_cfg.ManifestPath, _cfg.MasterSyncFolder);
        
        var results = new List<TestResult>();
        
        // Test Case 1: M·ªü file h·ª£p l·ªá
        results.Add(await TestCase1_ValidFile());
        
        // Test Case 2: S·ª≠a 1 byte trong file
        results.Add(await TestCase2_ModifiedByte());
        
        // Test Case 3: Sai k·ª≥ k√™ khai
        results.Add(await TestCase3_WrongPeriod());
        
        // Test Case 4: Sai s·ªë l·∫ßn
        results.Add(await TestCase4_WrongNumber());
        
        // Test Case 5: Thi·∫øu ch·ªØ k√Ω s·ªë
        results.Add(await TestCase5_MissingSignature());
        
        // Test Case 6: Manifest c≈© (stale)
        results.Add(await TestCase6_StaleManifest());
        
        // Test Case 7: D·ª´ng Syncthing
        results.Add(await TestCase7_StopSyncthing());
        
        // Test Case 8: D·ª´ng SyncGuard
        results.Add(await TestCase8_StopSyncGuard());
        
        // Test Case 9: D·ª´ng BotGuard
        results.Add(await TestCase9_StopBotGuard());
        
        // Test Case 10: Ki·ªÉm tra hi·ªáu nƒÉng v√† log g·ªçn
        results.Add(await TestCase10_PerformanceAndLogs());
        
        // B√°o c√°o k·∫øt qu·∫£
        PrintTestResults(results);
    }
    
    private async Task<TestResult> TestCase1_ValidFile()
    {
        Console.WriteLine("\nüîç TEST CASE 1: M·ªü file h·ª£p l·ªá");
        Console.WriteLine("Chu·∫©n b·ªã: XML g·ªëc c√≥ trong manifest; ch·ªØ k√Ω s·ªë h·ª£p l·ªá");
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // Validation ch·ªØ k√Ω s·ªë
            var signatureResult = XmlSignatureValidator.ValidateSignature(_xmlOriginalPath);
            if (!signatureResult.IsValid)
            {
                return new TestResult("TestCase1", false, $"Ch·ªØ k√Ω s·ªë kh√¥ng h·ª£p l·ªá: {signatureResult.Message}", stopwatch.ElapsedMilliseconds);
            }
            
            // Tr√≠ch xu·∫•t key
            if (!XmlFieldsExtractor.TryExtractKey(_xmlOriginalPath, out var key, out var error))
            {
                return new TestResult("TestCase1", false, $"Kh√¥ng th·ªÉ tr√≠ch xu·∫•t key: {error}", stopwatch.ElapsedMilliseconds);
            }
            
            // Ki·ªÉm tra manifest
            if (!ManifestValidator.TryGetOriginal(key, out var original, out var entry))
            {
                return new TestResult("TestCase1", false, "Kh√¥ng t√¨m th·∫•y trong manifest", stopwatch.ElapsedMilliseconds);
            }
            
            stopwatch.Stop();
            
            if (stopwatch.ElapsedMilliseconds <= 1000)
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Hi·ªÉn th·ªã n·ªôi dung b·∫£n g·ªëc; t·ªïng th·ªùi gian ‚â§ 1s");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Th·ªùi gian x·ª≠ l√Ω {stopwatch.ElapsedMilliseconds}ms");
                return new TestResult("TestCase1", true, "File h·ª£p l·ªá, m·ªü th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase1", false, $"Th·ªùi gian x·ª≠ l√Ω qu√° l√¢u: {stopwatch.ElapsedMilliseconds}ms", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase1", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
    }
    
    private async Task<TestResult> TestCase2_ModifiedByte()
    {
        Console.WriteLine("\nüîç TEST CASE 2: S·ª≠a 1 byte trong file");
        Console.WriteLine("Chu·∫©n b·ªã: Sao ch√©p XML g·ªëc r·ªìi s·ª≠a 1 k√Ω t·ª±");
        
        var stopwatch = Stopwatch.StartNew();
        var fakePath = @"cty B√¨nh Nguy·ªÖn Derco\FAKE_TEST_2.xml";
        
        try
        {
            // T·∫°o file fake b·∫±ng c√°ch s·ª≠a 1 byte
            var originalContent = File.ReadAllBytes(_xmlOriginalPath);
            originalContent[100] = (byte)(originalContent[100] ^ 1); // S·ª≠a 1 bit
            File.WriteAllBytes(fakePath, originalContent);
            
            // Test validation s·ª≠ d·ª•ng ManifestValidator.ValidateXmlFile
            var validationResult = ManifestValidator.ValidateXmlFile(fakePath);
            stopwatch.Stop();
            
            if (!validationResult.IsValid)
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Ch·∫∑n m·ªü; c·∫£nh b√°o 'hash/ch·ªØ k√Ω sai'");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Ch·∫∑n th√†nh c√¥ng - {validationResult.Message}");
                return new TestResult("TestCase2", true, "Ch·∫∑n file fake th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase2", false, "Kh√¥ng ch·∫∑n ƒë∆∞·ª£c file fake", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase2", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
        finally
        {
            try
            {
                if (File.Exists(fakePath))
                    File.Delete(fakePath);
            }
            catch { /* Ignore cleanup errors */ }
        }
    }
    
    private async Task<TestResult> TestCase3_WrongPeriod()
    {
        Console.WriteLine("\nüîç TEST CASE 3: Sai k·ª≥ k√™ khai");
        Console.WriteLine("Chu·∫©n b·ªã: XML c√≥ MST ƒë√∫ng, m√£ t·ªù khai ƒë√∫ng, k·ª≥ kh√°c so manifest");
        
        var stopwatch = Stopwatch.StartNew();
        var fakePath = @"cty B√¨nh Nguy·ªÖn Derco\FAKE_TEST_3.xml";
        
        try
        {
            // T·∫°o file fake v·ªõi k·ª≥ sai
            var originalContent = File.ReadAllText(_xmlOriginalPath);
            var modifiedContent = originalContent.Replace("<kyKKhai>3/2024</kyKKhai>", "<kyKKhai>4/2024</kyKKhai>");
            File.WriteAllText(fakePath, modifiedContent);
            
            // Test validation s·ª≠ d·ª•ng ManifestValidator.ValidateXmlFile
            var validationResult = ManifestValidator.ValidateXmlFile(fakePath);
            stopwatch.Stop();
            
            if (!validationResult.IsValid)
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Ch·∫∑n; n√™u r√µ tr∆∞·ªùng l·ªách");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Ch·∫∑n th√†nh c√¥ng - {validationResult.Message}");
                return new TestResult("TestCase3", true, "Ch·∫∑n file sai k·ª≥ th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase3", false, "Kh√¥ng ch·∫∑n ƒë∆∞·ª£c file sai k·ª≥", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase3", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
        finally
        {
            try
            {
                if (File.Exists(fakePath))
                    File.Delete(fakePath);
            }
            catch { /* Ignore cleanup errors */ }
        }
    }
    
    private async Task<TestResult> TestCase4_WrongNumber()
    {
        Console.WriteLine("\nüîç TEST CASE 4: Sai s·ªë l·∫ßn");
        Console.WriteLine("Chu·∫©n b·ªã: XML c√≥ soLan kh√°c manifest");
        
        var stopwatch = Stopwatch.StartNew();
        var fakePath = @"cty B√¨nh Nguy·ªÖn Derco\FAKE_TEST_4.xml";
        
        try
        {
            // T·∫°o file fake v·ªõi s·ªë l·∫ßn sai
            var originalContent = File.ReadAllText(_xmlOriginalPath);
            var modifiedContent = originalContent.Replace("<soLan>0</soLan>", "<soLan>1</soLan>");
            File.WriteAllText(fakePath, modifiedContent);
            
            // Test validation s·ª≠ d·ª•ng ManifestValidator.ValidateXmlFile
            var validationResult = ManifestValidator.ValidateXmlFile(fakePath);
            stopwatch.Stop();
            
            if (!validationResult.IsValid)
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Ch·∫∑n");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Ch·∫∑n th√†nh c√¥ng - {validationResult.Message}");
                return new TestResult("TestCase4", true, "Ch·∫∑n file sai s·ªë l·∫ßn th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase4", false, "Kh√¥ng ch·∫∑n ƒë∆∞·ª£c file sai s·ªë l·∫ßn", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase4", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
        finally
        {
            try
            {
                if (File.Exists(fakePath))
                    File.Delete(fakePath);
            }
            catch { /* Ignore cleanup errors */ }
        }
    }
    
    private async Task<TestResult> TestCase5_MissingSignature()
    {
        Console.WriteLine("\nüîç TEST CASE 5: Thi·∫øu ch·ªØ k√Ω s·ªë");
        Console.WriteLine("Chu·∫©n b·ªã: XML kh√¥ng c√≥ kh·ªëi ch·ªØ k√Ω s·ªë");
        
        var stopwatch = Stopwatch.StartNew();
        var fakePath = @"cty B√¨nh Nguy·ªÖn Derco\FAKE_TEST_5.xml";
        
        try
        {
            // T·∫°o file fake kh√¥ng c√≥ ch·ªØ k√Ω - lo·∫°i b·ªè ho√†n to√†n ph·∫ßn ch·ªØ k√Ω
            var originalContent = File.ReadAllText(_xmlOriginalPath);
            
            // T√¨m v√† lo·∫°i b·ªè to√†n b·ªô ph·∫ßn ch·ªØ k√Ω s·ªë
            var signatureStart = originalContent.IndexOf("<ds:Signature");
            if (signatureStart >= 0)
            {
                var signatureEnd = originalContent.IndexOf("</ds:Signature>", signatureStart);
                if (signatureEnd >= 0)
                {
                    var beforeSignature = originalContent.Substring(0, signatureStart);
                    var afterSignature = originalContent.Substring(signatureEnd + "</ds:Signature>".Length);
                    var modifiedContent = beforeSignature + afterSignature;
                    File.WriteAllText(fakePath, modifiedContent);
                    
                    // Debug: ki·ªÉm tra file c√≥ th·ª±c s·ª± kh√¥ng c√≥ ch·ªØ k√Ω kh√¥ng
                    var debugContent = File.ReadAllText(fakePath);
                    var hasSignature = debugContent.Contains("<ds:Signature");
                    Console.WriteLine($"Debug: File fake c√≥ ch·ªØ k√Ω: {hasSignature}");
                    
                    // N·∫øu v·∫´n c√≥ ch·ªØ k√Ω, th·ª≠ c√°ch kh√°c - lo·∫°i b·ªè t·∫•t c·∫£ ch·ªØ k√Ω
                    if (hasSignature)
                    {
                        var tempContent = debugContent;
                        while (tempContent.Contains("<ds:Signature"))
                        {
                            var start = tempContent.IndexOf("<ds:Signature");
                            var end = tempContent.IndexOf("</ds:Signature>", start);
                            if (end >= 0)
                            {
                                var before = tempContent.Substring(0, start);
                                var after = tempContent.Substring(end + "</ds:Signature>".Length);
                                tempContent = before + after;
                            }
                            else
                            {
                                break;
                            }
                        }
                        File.WriteAllText(fakePath, tempContent);
                        
                        // Ki·ªÉm tra l·∫°i
                        debugContent = File.ReadAllText(fakePath);
                        hasSignature = debugContent.Contains("<ds:Signature");
                        Console.WriteLine($"Debug: Sau khi lo·∫°i b·ªè l·∫°i, file fake c√≥ ch·ªØ k√Ω: {hasSignature}");
                    }
                }
                else
                {
                    // Fallback: s·ª≠a ƒë·ªïi ƒë∆°n gi·∫£n
                    var modifiedContent = originalContent.Replace("<ds:Signature", "<!-- REMOVED SIGNATURE -->");
                    File.WriteAllText(fakePath, modifiedContent);
                }
            }
            else
            {
                // Fallback: s·ª≠a ƒë·ªïi ƒë∆°n gi·∫£n
                var modifiedContent = originalContent.Replace("<CKyDTu>", "<CKyDTu><!-- REMOVED SIGNATURE -->");
                modifiedContent = modifiedContent.Replace("</CKyDTu>", "</CKyDTu>");
                File.WriteAllText(fakePath, modifiedContent);
            }
            
            // Test validation s·ª≠ d·ª•ng ManifestValidator.ValidateXmlFile
            var validationResult = ManifestValidator.ValidateXmlFile(fakePath);
            stopwatch.Stop();
            
            if (!validationResult.IsValid && validationResult.Code == "missing-signature")
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Ch·∫∑n; l√Ω do 'missing-signature'");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Ch·∫∑n th√†nh c√¥ng - {validationResult.Message}");
                return new TestResult("TestCase5", true, "Ch·∫∑n file thi·∫øu ch·ªØ k√Ω th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                Console.WriteLine($"Debug: Validation result: {validationResult.Code} - {validationResult.Message}");
                return new TestResult("TestCase5", false, $"Kh√¥ng ch·∫∑n ƒë√∫ng l√Ω do: {validationResult.Code}", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase5", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
        finally
        {
            try
            {
                if (File.Exists(fakePath))
                    File.Delete(fakePath);
            }
            catch { /* Ignore cleanup errors */ }
        }
    }
    
    private async Task<TestResult> TestCase6_StaleManifest()
    {
        Console.WriteLine("\nüîç TEST CASE 6: Manifest c≈© (stale)");
        Console.WriteLine("Chu·∫©n b·ªã: Tr√™n kho ph√°t h√†nh b·∫£n m·ªõi; client ch∆∞a ƒë·ªìng b·ªô xong");
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // T·∫°o file m·ªõi v·ªõi key ho√†n to√†n kh√°c manifest
            var newXmlPath = @"cty B√¨nh Nguy·ªÖn Derco\NEW_TAX_2025.xml";
            var content = File.ReadAllText(_xmlOriginalPath);
            
            // Thay ƒë·ªïi MST ƒë·ªÉ t·∫°o key m·ªõi kh√¥ng c√≥ trong manifest
            content = content.Replace("<mst>5702126556</mst>", "<mst>9999999999</mst>");
            // Thay ƒë·ªïi m√£ t·ªù khai
            content = content.Replace("<maTKhai>842</maTKhai>", "<maTKhai>999</maTKhai>");
            // Thay ƒë·ªïi k·ª≥ k√™ khai
            content = content.Replace("<kyKKhai>3/2024</kyKKhai>", "<kyKKhai>12/2025</kyKKhai>");
            // Thay ƒë·ªïi s·ªë l·∫ßn
            content = content.Replace("<soLan>0</soLan>", "<soLan>99</soLan>");
            
            File.WriteAllText(newXmlPath, content);
            
            // Test validation s·ª≠ d·ª•ng ManifestValidator.ValidateXmlFile
            var validationResult = ManifestValidator.ValidateXmlFile(newXmlPath);
            stopwatch.Stop();
            
            if (!validationResult.IsValid)
            {
                Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: Ch·∫∑n; tr·∫°ng th√°i 'manifest-stale'");
                Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: Ch·∫∑n th√†nh c√¥ng - {validationResult.Message}");
                return new TestResult("TestCase6", true, "Ch·∫∑n file m·ªõi kh√¥ng c√≥ trong manifest", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase6", false, "Kh√¥ng ch·∫∑n ƒë∆∞·ª£c file m·ªõi", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase6", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
        finally
        {
            var newXmlPath = @"cty B√¨nh Nguy·ªÖn Derco\NEW_TAX_2025.xml";
            try
            {
                if (File.Exists(newXmlPath))
                    File.Delete(newXmlPath);
            }
            catch { /* Ignore cleanup errors */ }
        }
    }
    
    private async Task<TestResult> TestCase7_StopSyncthing()
    {
        Console.WriteLine("\nüîç TEST CASE 7: D·ª´ng Syncthing");
        Console.WriteLine("Chu·∫©n b·ªã: T·∫Øt d·ªãch v·ª• Syncthing b·∫±ng tay");
        Console.WriteLine("‚ö†Ô∏è  Y√™u c·∫ßu: T·∫Øt Syncthing th·ªß c√¥ng ƒë·ªÉ test");
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // Ki·ªÉm tra Syncthing c√≥ ƒëang ch·∫°y kh√¥ng
            var syncthingProcesses = Process.GetProcessesByName("syncthing");
            if (syncthingProcesses.Length == 0)
            {
                Console.WriteLine("‚úÖ Syncthing ƒë√£ b·ªã d·ª´ng, ƒë·ª£i BotGuard kh·ªüi ƒë·ªông l·∫°i...");
                await Task.Delay(15000); // ƒê·ª£i 15 gi√¢y
                
                syncthingProcesses = Process.GetProcessesByName("syncthing");
                if (syncthingProcesses.Length > 0)
                {
                    stopwatch.Stop();
                    Console.WriteLine("‚úÖ K·ª≥ v·ªçng: T·ª± b·∫≠t l·∫°i; g·ª≠i c·∫£nh b√°o");
                    Console.WriteLine("‚úÖ Th·ª±c t·∫ø: Syncthing ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i");
                    return new TestResult("TestCase7", true, "Syncthing t·ª± kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
                }
                else
                {
                    stopwatch.Stop();
                    return new TestResult("TestCase7", false, "Syncthing kh√¥ng t·ª± kh·ªüi ƒë·ªông l·∫°i", stopwatch.ElapsedMilliseconds);
                }
            }
            else
            {
                stopwatch.Stop();
                Console.WriteLine("‚ÑπÔ∏è  Syncthing ƒëang ch·∫°y, c·∫ßn t·∫Øt th·ªß c√¥ng ƒë·ªÉ test");
                return new TestResult("TestCase7", true, "Syncthing ƒëang ch·∫°y b√¨nh th∆∞·ªùng", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase7", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
    }
    
    private async Task<TestResult> TestCase8_StopSyncGuard()
    {
        Console.WriteLine("\nüîç TEST CASE 8: D·ª´ng SyncGuard");
        Console.WriteLine("Chu·∫©n b·ªã: End Task SyncGuard");
        Console.WriteLine("‚ö†Ô∏è  Y√™u c·∫ßu: D·ª´ng SyncGuard th·ªß c√¥ng ƒë·ªÉ test");
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // Ki·ªÉm tra SyncGuard service
            var services = ServiceController.GetServices();
            var syncGuardService = services.FirstOrDefault(s => s.ServiceName == "SyncGuard");
            
            if (syncGuardService != null)
            {
                if (syncGuardService.Status != ServiceControllerStatus.Running)
                {
                    Console.WriteLine("‚úÖ SyncGuard ƒë√£ b·ªã d·ª´ng, ƒë·ª£i BotGuard kh·ªüi ƒë·ªông l·∫°i...");
                    await Task.Delay(15000); // ƒê·ª£i 15 gi√¢y
                    
                    syncGuardService.Refresh();
                    if (syncGuardService.Status == ServiceControllerStatus.Running)
                    {
                        stopwatch.Stop();
                        Console.WriteLine("‚úÖ K·ª≥ v·ªçng: BotGuard kh·ªüi ƒë·ªông l·∫°i SyncGuard; g·ª≠i c·∫£nh b√°o");
                        Console.WriteLine("‚úÖ Th·ª±c t·∫ø: SyncGuard ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i");
                        return new TestResult("TestCase8", true, "SyncGuard t·ª± kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng", stopwatch.ElapsedMilliseconds);
                    }
                    else
                    {
                        stopwatch.Stop();
                        return new TestResult("TestCase8", false, "SyncGuard kh√¥ng t·ª± kh·ªüi ƒë·ªông l·∫°i", stopwatch.ElapsedMilliseconds);
                    }
                }
                else
                {
                    stopwatch.Stop();
                    Console.WriteLine("‚ÑπÔ∏è  SyncGuard ƒëang ch·∫°y, c·∫ßn d·ª´ng th·ªß c√¥ng ƒë·ªÉ test");
                    return new TestResult("TestCase8", true, "SyncGuard ƒëang ch·∫°y b√¨nh th∆∞·ªùng", stopwatch.ElapsedMilliseconds);
                }
            }
            else
            {
                stopwatch.Stop();
                return new TestResult("TestCase8", false, "Kh√¥ng t√¨m th·∫•y SyncGuard service", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase8", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
    }
    
    private async Task<TestResult> TestCase9_StopBotGuard()
    {
        Console.WriteLine("\nüîç TEST CASE 9: D·ª´ng BotGuard");
        Console.WriteLine("Chu·∫©n b·ªã: End Task BotGuard");
        Console.WriteLine("‚ö†Ô∏è  L∆∞u √Ω: BotGuard kh√¥ng th·ªÉ t·ª± kh·ªüi ƒë·ªông l·∫°i");
        
        var stopwatch = Stopwatch.StartNew();
        
        try
        {
            // BotGuard kh√¥ng th·ªÉ t·ª± kh·ªüi ƒë·ªông l·∫°i, ch·ªâ log c·∫£nh b√°o
            Console.WriteLine("‚ÑπÔ∏è  BotGuard kh√¥ng th·ªÉ t·ª± kh·ªüi ƒë·ªông l·∫°i, ch·ªâ log c·∫£nh b√°o");
            stopwatch.Stop();
            return new TestResult("TestCase9", true, "BotGuard kh√¥ng th·ªÉ t·ª± kh·ªüi ƒë·ªông l·∫°i (ƒë√∫ng thi·∫øt k·∫ø)", stopwatch.ElapsedMilliseconds);
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase9", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
    }
    
    private async Task<TestResult> TestCase10_PerformanceAndLogs()
    {
        Console.WriteLine("\nüîç TEST CASE 10: Ki·ªÉm tra hi·ªáu nƒÉng v√† log g·ªçn");
        Console.WriteLine("Chu·∫©n b·ªã: M·ªü 20 file li√™n ti·∫øp (10 h·ª£p l·ªá, 10 b·ªã ch·∫∑n)");
        
        var stopwatch = Stopwatch.StartNew();
        var results = new List<long>();
        var successCount = 0;
        var blockedCount = 0;
        
        try
        {
            // Test 10 file h·ª£p l·ªá
            for (int i = 0; i < 10; i++)
            {
                var testStopwatch = Stopwatch.StartNew();
                var validationResult = ManifestValidator.ValidateXmlFile(_xmlOriginalPath);
                testStopwatch.Stop();
                
                results.Add(testStopwatch.ElapsedMilliseconds);
                if (validationResult.IsValid)
                    successCount++;
                else
                    blockedCount++;
            }
            
            // Test 10 file fake (t·∫°o file fake ƒë∆°n gi·∫£n)
            for (int i = 0; i < 10; i++)
            {
                var testStopwatch = Stopwatch.StartNew();
                
                // T·∫°o file fake
                var fakePath = $@"cty B√¨nh Nguy·ªÖn Derco\FAKE_PERF_{i}.xml";
                var content = File.ReadAllText(_xmlOriginalPath);
                content = content.Replace("ETAX11320240281480150", $"ETAX1132024028148015{i}");
                File.WriteAllText(fakePath, content);
                
                var validationResult = ManifestValidator.ValidateXmlFile(fakePath);
                testStopwatch.Stop();
                
                results.Add(testStopwatch.ElapsedMilliseconds);
                if (validationResult.IsValid)
                    successCount++;
                else
                    blockedCount++;
                
                // D·ªçn d·∫πp
                try
                {
                    File.Delete(fakePath);
                }
                catch { /* Ignore cleanup errors */ }
            }
            
            stopwatch.Stop();
            
            var avgTime = results.Average();
            var maxTime = results.Max();
            var under1sCount = results.Count(t => t <= 1000);
            var percentage = (double)under1sCount / results.Count * 100;
            
            Console.WriteLine($"‚úÖ K·ª≥ v·ªçng: 95% l∆∞·ª£t ‚â§ 1s; bot ch·ªâ nh·∫≠n WARN/ERROR, kh√¥ng spam INFO");
            Console.WriteLine($"‚úÖ Th·ª±c t·∫ø: {percentage:F1}% l∆∞·ª£t ‚â§ 1s ({under1sCount}/{results.Count})");
            Console.WriteLine($"‚úÖ Th·ªùi gian trung b√¨nh: {avgTime:F0}ms, t·ªëi ƒëa: {maxTime}ms");
            Console.WriteLine($"‚úÖ K·∫øt qu·∫£: {successCount} th√†nh c√¥ng, {blockedCount} b·ªã ch·∫∑n");
            
            if (percentage >= 95)
            {
                return new TestResult("TestCase10", true, $"Hi·ªáu nƒÉng ƒë·∫°t y√™u c·∫ßu: {percentage:F1}% ‚â§ 1s", stopwatch.ElapsedMilliseconds);
            }
            else
            {
                return new TestResult("TestCase10", false, $"Hi·ªáu nƒÉng kh√¥ng ƒë·∫°t y√™u c·∫ßu: {percentage:F1}% ‚â§ 1s", stopwatch.ElapsedMilliseconds);
            }
        }
        catch (Exception ex)
        {
            stopwatch.Stop();
            return new TestResult("TestCase10", false, $"L·ªói: {ex.Message}", stopwatch.ElapsedMilliseconds);
        }
    }
    
    private void PrintTestResults(List<TestResult> results)
    {
        Console.WriteLine("\n" + new string('=', 60));
        Console.WriteLine("üìä B√ÅO C√ÅO K·∫æT QU·∫¢ TEST");
        Console.WriteLine(new string('=', 60));
        
        var passed = results.Count(r => r.Passed);
        var failed = results.Count(r => !r.Passed);
        var totalTime = results.Sum(r => r.ExecutionTime);
        
        Console.WriteLine($"T·ªïng s·ªë test case: {results.Count}");
        Console.WriteLine($"‚úÖ Th√†nh c√¥ng: {passed}");
        Console.WriteLine($"‚ùå Th·∫•t b·∫°i: {failed}");
        Console.WriteLine($"‚è±Ô∏è  T·ªïng th·ªùi gian: {totalTime}ms");
        
        Console.WriteLine("\nüìã Chi ti·∫øt t·ª´ng test case:");
        foreach (var result in results)
        {
            var status = result.Passed ? "‚úÖ" : "‚ùå";
            Console.WriteLine($"{status} {result.Name}: {result.Message} ({result.ExecutionTime}ms)");
        }
        
        if (passed == results.Count)
        {
            Console.WriteLine("\nüéâ T·∫§T C·∫¢ TEST CASE ƒê·ªÄU TH√ÄNH C√îNG!");
            Console.WriteLine("H·ªá th·ªëng AntiFakeXML P1 ƒë√£ s·∫µn s√†ng tri·ªÉn khai!");
        }
        else
        {
            Console.WriteLine($"\n‚ö†Ô∏è  C√ì {failed} TEST CASE TH·∫§T B·∫†I!");
            Console.WriteLine("C·∫ßn ki·ªÉm tra v√† s·ª≠a l·ªói tr∆∞·ªõc khi tri·ªÉn khai.");
        }
    }
}

public record TestResult(string Name, bool Passed, string Message, long ExecutionTime);
