#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML VALIDATOR & SCANNER - THU·∫æ FORTRESS SYNC
Tool GUI ƒë·ªÉ qu√©t v√† validate file XML tr∆∞·ªõc khi n·∫°p v√†o kho Master
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import sys
import json
import hashlib
import xml.etree.ElementTree as ET
from pathlib import Path
from datetime import datetime
import threading
import requests

class XMLValidatorGUI:
    """GUI ch√≠nh cho XML Validator"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("üîí XML VALIDATOR - THU·∫æ FORTRESS SYNC")
        self.root.geometry("1000x700")
        self.root.configure(bg='#2b2b2b')
        
        # C·∫•u h√¨nh style
        self.setup_styles()
        
        # Bi·∫øn l∆∞u tr·ªØ
        self.selected_files = []
        self.baseline_hashes = {}
        self.scan_results = []
        
        # Kh·ªüi t·∫°o baseline
        self.load_baseline()
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
    def setup_styles(self):
        """Thi·∫øt l·∫≠p style cho GUI"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # C·∫•u h√¨nh style
        style.configure('Title.TLabel', 
                       font=('Arial', 16, 'bold'), 
                       foreground='#00ff00',
                       background='#2b2b2b')
        
        style.configure('Header.TLabel', 
                       font=('Arial', 12, 'bold'), 
                       foreground='#ffffff',
                       background='#2b2b2b')
        
        style.configure('Info.TLabel', 
                       font=('Arial', 10), 
                       foreground='#cccccc',
                       background='#2b2b2b')
        
        style.configure('Success.TLabel', 
                       font=('Arial', 10, 'bold'), 
                       foreground='#00ff00',
                       background='#2b2b2b')
        
        style.configure('Warning.TLabel', 
                       font=('Arial', 10, 'bold'), 
                       foreground='#ffff00',
                       background='#2b2b2b')
        
        style.configure('Error.TLabel', 
                       font=('Arial', 10, 'bold'), 
                       foreground='#ff0000',
                       background='#2b2b2b')
    
    def load_baseline(self):
        """Load baseline hashes t·ª´ Master Node"""
        try:
            baseline_folder = Path("Cty Ti·∫øn B√¨nh Y·∫øn")
            if baseline_folder.exists():
                for xml_file in baseline_folder.rglob("*.xml"):
                    file_hash = self._calculate_file_hash(xml_file)
                    if file_hash:
                        self.baseline_hashes[xml_file.name] = {
                            'hash': file_hash,
                            'path': str(xml_file),
                            'size': xml_file.stat().st_size,
                            'modified': xml_file.stat().st_mtime
                        }
                print(f"‚úÖ Baseline loaded: {len(self.baseline_hashes)} files")
            else:
                print("‚ö†Ô∏è Baseline folder not found")
                
        except Exception as e:
            print(f"‚ùå Failed to load baseline: {e}")
    
    def _calculate_file_hash(self, file_path):
        """T√≠nh hash MD5 c·ªßa file"""
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.md5(f.read()).hexdigest()
            return file_hash
        except Exception:
            return None
    
    def create_widgets(self):
        """T·∫°o c√°c widget cho GUI"""
        # Title
        title_label = ttk.Label(self.root, 
                               text="üîí XML VALIDATOR & SCANNER", 
                               style='Title.TLabel')
        title_label.pack(pady=10)
        
        subtitle_label = ttk.Label(self.root, 
                                  text="Tool qu√©t v√† validate file XML tr∆∞·ªõc khi n·∫°p v√†o kho Master", 
                                  style='Info.TLabel')
        subtitle_label.pack(pady=5)
        
        # Main Frame
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Left Panel - File Selection
        left_panel = ttk.LabelFrame(main_frame, text="üìÅ CH·ªåN FILE XML", padding=10)
        left_panel.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        # File selection buttons
        btn_frame = ttk.Frame(left_panel)
        btn_frame.pack(fill='x', pady=5)
        
        ttk.Button(btn_frame, text="üìÇ Ch·ªçn File", 
                  command=self.select_files).pack(side='left', padx=(0, 10))
        
        ttk.Button(btn_frame, text="üìÅ Ch·ªçn Th∆∞ M·ª•c", 
                  command=self.select_folder).pack(side='left', padx=(0, 10))
        
        ttk.Button(btn_frame, text="üóëÔ∏è X√≥a T·∫•t C·∫£", 
                  command=self.clear_files).pack(side='left')
        
        # File list
        file_frame = ttk.Frame(left_panel)
        file_frame.pack(fill='both', expand=True, pady=5)
        
        ttk.Label(file_frame, text="Danh s√°ch file ƒë√£ ch·ªçn:", 
                 style='Header.TLabel').pack(anchor='w')
        
        self.file_listbox = tk.Listbox(file_frame, bg='#3c3c3c', fg='#ffffff', 
                                      selectmode='extended', height=8)
        self.file_listbox.pack(fill='both', expand=True)
        
        # Scan button
        scan_btn = ttk.Button(left_panel, text="üîç QU√âT & VALIDATE", 
                             command=self.start_scan, style='Accent.TButton')
        scan_btn.pack(fill='x', pady=10)
        
        # Right Panel - Results
        right_panel = ttk.LabelFrame(main_frame, text="üìä K·∫æT QU·∫¢ QU√âT", padding=10)
        right_panel.pack(side='right', fill='both', expand=True, padx=(10, 0))
        
        # Results display
        results_frame = ttk.Frame(right_panel)
        results_frame.pack(fill='both', expand=True)
        
        ttk.Label(results_frame, text="K·∫øt qu·∫£ ki·ªÉm tra:", 
                 style='Header.TLabel').pack(anchor='w')
        
        self.results_text = scrolledtext.ScrolledText(results_frame, 
                                                    bg='#3c3c3c', fg='#ffffff',
                                                    height=15, width=50)
        self.results_text.pack(fill='both', expand=True)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("S·∫µn s√†ng qu√©t file XML...")
        
        status_bar = ttk.Label(self.root, textvariable=self.status_var, 
                              relief='sunken', anchor='w', style='Info.TLabel')
        status_bar.pack(side='bottom', fill='x')
        
        # Progress bar
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(self.root, variable=self.progress_var, 
                                           maximum=100)
        self.progress_bar.pack(side='bottom', fill='x', padx=20, pady=5)
    
    def select_files(self):
        """Ch·ªçn nhi·ªÅu file XML"""
        try:
            files = filedialog.askopenfilenames(
                title="Ch·ªçn file XML ƒë·ªÉ qu√©t",
                filetypes=[("XML files", "*.xml"), ("All files", "*.*")]
            )
            
            if files:
                for file_path in files:
                    if file_path not in self.selected_files:
                        self.selected_files.append(file_path)
                        self.file_listbox.insert(tk.END, os.path.basename(file_path))
                
                self.status_var.set(f"ƒê√£ ch·ªçn {len(self.selected_files)} file")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·ªçn file: {e}")
    
    def select_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ch·ª©a file XML"""
        try:
            folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a file XML")
            
            if folder:
                xml_files = list(Path(folder).rglob("*.xml"))
                
                for xml_file in xml_files:
                    file_path = str(xml_file)
                    if file_path not in self.selected_files:
                        self.selected_files.append(file_path)
                        self.file_listbox.insert(tk.END, xml_file.name)
                
                self.status_var.set(f"ƒê√£ ch·ªçn {len(self.selected_files)} file t·ª´ th∆∞ m·ª•c")
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·ªçn th∆∞ m·ª•c: {e}")
    
    def clear_files(self):
        """X√≥a t·∫•t c·∫£ file ƒë√£ ch·ªçn"""
        self.selected_files.clear()
        self.file_listbox.delete(0, tk.END)
        self.status_var.set("ƒê√£ x√≥a t·∫•t c·∫£ file")
    
    def start_scan(self):
        """B·∫Øt ƒë·∫ßu qu√©t v√† validate file"""
        if not self.selected_files:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file XML ƒë·ªÉ qu√©t!")
            return
        
        # Clear previous results
        self.results_text.delete(1.0, tk.END)
        self.scan_results.clear()
        
        # Start scanning in separate thread
        scan_thread = threading.Thread(target=self._scan_files, daemon=True)
        scan_thread.start()
    
    def _scan_files(self):
        """Qu√©t file trong thread ri√™ng"""
        try:
            total_files = len(self.selected_files)
            self.progress_var.set(0)
            
            for i, file_path in enumerate(self.selected_files):
                try:
                    # Update progress
                    progress = (i + 1) / total_files * 100
                    self.root.after(0, lambda p=progress: self.progress_var.set(p))
                    
                    # Update status
                    self.root.after(0, lambda f=os.path.basename(file_path): 
                                  self.status_var.set(f"ƒêang qu√©t: {f}"))
                    
                    # Scan file
                    result = self._scan_single_file(file_path)
                    self.scan_results.append(result)
                    
                    # Display result
                    self.root.after(0, lambda r=result: self._display_result(r))
                    
                except Exception as e:
                    error_result = {
                        'file_path': file_path,
                        'file_name': os.path.basename(file_path),
                        'status': 'ERROR',
                        'message': f"L·ªói khi qu√©t file: {e}",
                        'details': {}
                    }
                    self.scan_results.append(error_result)
                    self.root.after(0, lambda r=error_result: self._display_result(r))
            
            # Scan completed
            self.root.after(0, lambda: self._scan_completed())
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói khi qu√©t: {e}"))
    
    def _scan_single_file(self, file_path):
        """Qu√©t m·ªôt file XML c·ª• th·ªÉ"""
        try:
            file_name = os.path.basename(file_path)
            file_path_obj = Path(file_path)
            
            result = {
                'file_path': file_path,
                'file_name': file_name,
                'status': 'UNKNOWN',
                'message': '',
                'details': {}
            }
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not file_path_obj.exists():
                result['status'] = 'ERROR'
                result['message'] = 'File kh√¥ng t·ªìn t·∫°i'
                return result
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            file_size = file_path_obj.stat().st_size
            result['details']['file_size'] = file_size
            
            if file_size == 0:
                result['status'] = 'ERROR'
                result['message'] = 'File r·ªóng'
                return result
            
            # T√≠nh hash MD5
            file_hash = self._calculate_file_hash(file_path_obj)
            result['details']['file_hash'] = file_hash
            
            # Ki·ªÉm tra v·ªõi baseline
            if file_name in self.baseline_hashes:
                baseline_info = self.baseline_hashes[file_name]
                
                if file_hash == baseline_info['hash']:
                    result['status'] = 'ORIGINAL'
                    result['message'] = 'File g·ªëc - Kh·ªõp v·ªõi baseline'
                    result['details']['baseline_match'] = True
                else:
                    result['status'] = 'FAKE'
                    result['message'] = 'File fake - Hash kh√¥ng kh·ªõp v·ªõi baseline'
                    result['details']['baseline_match'] = False
                    result['details']['baseline_hash'] = baseline_info['hash']
            else:
                result['status'] = 'NEW'
                result['message'] = 'File m·ªõi - Kh√¥ng c√≥ trong baseline'
                result['details']['baseline_match'] = False
            
            # Validate XML structure
            xml_validation = self._validate_xml_structure(file_path_obj)
            result['details']['xml_validation'] = xml_validation
            
            # Ki·ªÉm tra n·ªôi dung XML
            content_check = self._check_xml_content(file_path_obj)
            result['details']['content_check'] = content_check
            
            return result
            
        except Exception as e:
            return {
                'file_path': file_path,
                'file_name': os.path.basename(file_path),
                'status': 'ERROR',
                'message': f'L·ªói khi qu√©t: {e}',
                'details': {}
            }
    
    def _validate_xml_structure(self, file_path):
        """Validate c·∫•u tr√∫c XML"""
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            
            # Ki·ªÉm tra namespace
            namespaces = root.nsmap if hasattr(root, 'nsmap') else {}
            
            # Ki·ªÉm tra c√°c element ch√≠nh
            main_elements = []
            for child in root:
                main_elements.append(child.tag)
            
            return {
                'valid': True,
                'root_tag': root.tag,
                'namespaces': namespaces,
                'main_elements': main_elements,
                'element_count': len(main_elements)
            }
            
        except ET.ParseError as e:
            return {
                'valid': False,
                'error': f'XML parse error: {e}'
            }
        except Exception as e:
            return {
                'valid': False,
                'error': f'Validation error: {e}'
            }
    
    def _check_xml_content(self, file_path):
        """Ki·ªÉm tra n·ªôi dung XML"""
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            
            content_info = {
                'has_tax_info': False,
                'has_company_info': False,
                'has_declaration_info': False,
                'content_summary': {}
            }
            
            # Ki·ªÉm tra th√¥ng tin thu·∫ø
            for elem in root.iter():
                tag = elem.tag.lower()
                text = elem.text.strip() if elem.text else ""
                
                if 'thue' in tag or 'tax' in tag:
                    content_info['has_tax_info'] = True
                
                if 'congty' in tag or 'company' in tag:
                    content_info['has_company_info'] = True
                
                if 'khai' in tag or 'declaration' in tag:
                    content_info['has_declaration_info'] = True
                
                # L∆∞u th√¥ng tin quan tr·ªçng
                if text and len(text) > 5:
                    content_info['content_summary'][tag] = text[:100] + "..." if len(text) > 100 else text
            
            return content_info
            
        except Exception as e:
            return {
                'error': f'Content check error: {e}'
            }
    
    def _display_result(self, result):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ qu√©t"""
        try:
            # X√°c ƒë·ªãnh m√†u s·∫Øc theo status
            if result['status'] == 'ORIGINAL':
                status_icon = "‚úÖ"
                status_color = "green"
            elif result['status'] == 'NEW':
                status_icon = "üÜï"
                status_color = "blue"
            elif result['status'] == 'FAKE':
                status_icon = "üö®"
                status_color = "red"
            else:
                status_icon = "‚ùå"
                status_color = "orange"
            
            # T·∫°o text hi·ªÉn th·ªã
            display_text = f"{status_icon} {result['file_name']}\n"
            display_text += f"   Tr·∫°ng th√°i: {result['status']}\n"
            display_text += f"   Th√¥ng b√°o: {result['message']}\n"
            
            # Th√™m chi ti·∫øt
            if 'details' in result:
                details = result['details']
                if 'file_size' in details:
                    display_text += f"   K√≠ch th∆∞·ªõc: {details['file_size']:,} bytes\n"
                if 'xml_validation' in details:
                    xml_val = details['xml_validation']
                    if xml_val.get('valid'):
                        display_text += f"   XML: ‚úÖ H·ª£p l·ªá ({xml_val.get('element_count', 0)} elements)\n"
                    else:
                        display_text += f"   XML: ‚ùå Kh√¥ng h·ª£p l·ªá - {xml_val.get('error', 'Unknown error')}\n"
                if 'content_check' in details:
                    content = details['content_check']
                    if 'has_tax_info' in content:
                        display_text += f"   N·ªôi dung: {'‚úÖ' if content['has_tax_info'] else '‚ùå'} Th√¥ng tin thu·∫ø\n"
                        display_text += f"            {'‚úÖ' if content.get('has_company_info') else '‚ùå'} Th√¥ng tin c√¥ng ty\n"
                        display_text += f"            {'‚úÖ' if content.get('has_declaration_info') else '‚ùå'} Th√¥ng tin khai thu·∫ø\n"
            
            display_text += "-" * 50 + "\n\n"
            
            # Th√™m v√†o text widget
            self.results_text.insert(tk.END, display_text)
            self.results_text.see(tk.END)
            
        except Exception as e:
            print(f"Error displaying result: {e}")
    
    def _scan_completed(self):
        """Ho√†n th√†nh qu√©t"""
        try:
            # T√≠nh th·ªëng k√™
            total_files = len(self.scan_results)
            original_count = sum(1 for r in self.scan_results if r['status'] == 'ORIGINAL')
            new_count = sum(1 for r in self.scan_results if r['status'] == 'NEW')
            fake_count = sum(1 for r in self.scan_results if r['status'] == 'FAKE')
            error_count = sum(1 for r in self.scan_results if r['status'] == 'ERROR')
            
            # Hi·ªÉn th·ªã t·ªïng k·∫øt
            summary = f"\n{'='*60}\n"
            summary += f"üìä T·ªîNG K·∫æT QU√âT\n"
            summary += f"{'='*60}\n"
            summary += f"‚úÖ File g·ªëc: {original_count}/{total_files}\n"
            summary += f"üÜï File m·ªõi: {new_count}/{total_files}\n"
            summary += f"üö® File fake: {fake_count}/{total_files}\n"
            summary += f"‚ùå File l·ªói: {error_count}/{total_files}\n"
            summary += f"{'='*60}\n"
            
            if fake_count > 0:
                summary += f"‚ö†Ô∏è C·∫¢NH B√ÅO: Ph√°t hi·ªán {fake_count} file fake!\n"
                summary += f"   Kh√¥ng n√™n n·∫°p v√†o kho Master!\n"
            else:
                summary += f"‚úÖ T·∫•t c·∫£ file ƒë·ªÅu an to√†n!\n"
                summary += f"   C√≥ th·ªÉ n·∫°p v√†o kho Master.\n"
            
            summary += f"{'='*60}\n"
            
            self.results_text.insert(tk.END, summary)
            self.results_text.see(tk.END)
            
            # Update status
            self.status_var.set(f"Ho√†n th√†nh qu√©t {total_files} file")
            self.progress_var.set(100)
            
            # Show completion message
            if fake_count > 0:
                messagebox.showwarning("C·∫£nh b√°o", 
                                     f"Ph√°t hi·ªán {fake_count} file fake!\nKh√¥ng n√™n n·∫°p v√†o kho Master!")
            else:
                messagebox.showinfo("Ho√†n th√†nh", 
                                  f"Qu√©t ho√†n th√†nh!\nT·∫•t c·∫£ {total_files} file ƒë·ªÅu an to√†n.")
                
        except Exception as e:
            print(f"Error in scan completion: {e}")

def main():
    """H√†m main"""
    try:
        root = tk.Tk()
        app = XMLValidatorGUI(root)
        
        # Center window
        root.update_idletasks()
        width = root.winfo_width()
        height = root.winfo_height()
        x = (root.winfo_screenwidth() // 2) - (width // 2)
        y = (root.winfo_screenheight() // 2) - (height // 2)
        root.geometry(f'{width}x{height}+{x}+{y}')
        
        root.mainloop()
        
    except Exception as e:
        print(f"Fatal error: {e}")
        messagebox.showerror("L·ªói nghi√™m tr·ªçng", f"Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")

if __name__ == "__main__":
    main()
