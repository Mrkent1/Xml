#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
THU·∫æ FORTRESS SYNC - HYBRID MASTER NODE
T√≠ch h·ª£p Syncthing v·ªõi XMLProcessor logic ghi ƒë√®
"""

import os
import sys
import time
import json
import logging
import requests
import sqlite3
import threading
from datetime import datetime
from pathlib import Path
import xml.etree.ElementTree as ET

# Import logic t·ª´ XMLProcessor
try:
    sys.path.append(r"C:\Users\Administrator\Videos\xml")
    from icon3 import init_machine_management, get_machine_info
    XML_PROCESSOR_AVAILABLE = True
    print("‚úÖ XMLProcessor logic loaded successfully")
except ImportError as e:
    XML_PROCESSOR_AVAILABLE = False
    print(f"‚ö†Ô∏è XMLProcessor not available: {e}")

# --- C·∫§U H√åNH HYBRID FORTRESS --- #
APP_DIR = Path(os.getenv('APPDATA', Path.home())) / 'Thu·∫øFortressSync'
APP_DIR.mkdir(parents=True, exist_ok=True)

# Files c·∫•u h√¨nh
CONFIG_FILE = APP_DIR / 'hybrid_config.json'
LOG_FILE = APP_DIR / 'hybrid_master.log'
SYNC_DB = APP_DIR / 'sync_machines.db'

# Syncthing API config
SYNCTHING_CONFIG = {
    "baseUrl": "http://127.0.0.1:8384",
    "apiKey": "",  # S·∫Ω l·∫•y t·ª´ Syncthing config
    "folderId": "",  # S·∫Ω t·∫°o khi setup
    "folderRoot": r"C:\Users\Administrator\Videos\SYNC TAXX"
}

# Telegram config (t·ª´ XMLProcessor)
TELEGRAM_CONFIG = {
    "bot_token": "7283723256:AAEqXPiQ-s2sYI8vyhfUyrcq8uL-pRG_UZI",
    "group_id": "-1002980917638"
}

# --- LOGGING --- #
logging.basicConfig(
    filename=str(LOG_FILE),
    encoding='utf-8',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class HybridFortressMaster:
    """Master Node t√≠ch h·ª£p Syncthing + XMLProcessor"""
    
    def __init__(self):
        self.syncthing_client = None
        self.xml_processor = None
        self.machine_manager = None
        self.is_running = False
        
        # Kh·ªüi t·∫°o c√°c component
        self.init_components()
    
    def init_components(self):
        """Kh·ªüi t·∫°o c√°c component c·∫ßn thi·∫øt"""
        try:
            # 1. Kh·ªüi t·∫°o Machine Management (t·ª´ XMLProcessor)
            if XML_PROCESSOR_AVAILABLE:
                init_machine_management()
                self.machine_manager = True
                logging.info("‚úÖ Machine Management initialized")
            
            # 2. Kh·ªüi t·∫°o Syncthing client
            self.init_syncthing_client()
            
            # 3. T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
            self.create_default_config()
            
            logging.info("‚úÖ Hybrid Fortress Master initialized successfully")
            
        except Exception as e:
            logging.error(f"‚ùå Failed to initialize components: {e}")
            raise
    
    def init_syncthing_client(self):
        """Kh·ªüi t·∫°o Syncthing client"""
        try:
            # Ki·ªÉm tra Syncthing c√≥ ch·∫°y kh√¥ng
            response = requests.get(f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status", timeout=5)
            if response.status_code == 200:
                logging.info("‚úÖ Syncthing is running")
                self.syncthing_client = True
                
                # T·ª± ƒë·ªông l·∫•y API key
                if not SYNCTHING_CONFIG["apiKey"]:
                    self.get_syncthing_api_key()
                
                # T·ª± ƒë·ªông t·∫°o folder config
                if SYNCTHING_CONFIG["apiKey"]:
                    self.create_syncthing_folder_config()
                    
            else:
                logging.warning("‚ö†Ô∏è Syncthing not responding properly")
                
        except requests.exceptions.RequestException as e:
            logging.error(f"‚ùå Syncthing not accessible: {e}")
            print("‚ö†Ô∏è Syncthing ch∆∞a ch·∫°y. H√£y kh·ªüi ƒë·ªông Syncthing tr∆∞·ªõc!")
            print("üí° H∆∞·ªõng d·∫´n:")
            print("   1. M·ªü cmd v·ªõi quy·ªÅn Admin")
            print("   2. cd 'C:\\Users\\Administrator\\Videos\\SYNC TAXX\\syncthing-windows-amd64-v1.27.6'")
            print("   3. syncthing.exe")
            print("   4. ƒê·ª£i Syncthing kh·ªüi ƒë·ªông xong (c√≥ icon trong system tray)")
            print("   5. Ch·∫°y l·∫°i python hybrid_fortress_master.py")
    
    def create_default_config(self):
        """T·∫°o c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho Hybrid Fortress"""
        try:
            if not CONFIG_FILE.exists():
                default_config = {
                    "syncthing": {
                        "baseUrl": SYNCTHING_CONFIG["baseUrl"],
                        "apiKey": "",
                        "folderId": "tax_xml_master",
                        "folderRoot": SYNCTHING_CONFIG["folderRoot"]
                    },
                    "telegram": TELEGRAM_CONFIG,
                    "monitoring": {
                        "interval": 5,
                        "health_check_interval": 300,
                        "log_retention_days": 30
                    },
                    "security": {
                        "auto_overwrite": True,
                        "conflict_resolution": "master_wins",
                        "stealth_mode": True
                    }
                }
                
                with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
                    json.dump(default_config, f, indent=2, ensure_ascii=False)
                
                logging.info("‚úÖ Default configuration created")
            
            # Load config
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                config = json.load(f)
                SYNCTHING_CONFIG.update(config["syncthing"])
                
        except Exception as e:
            logging.error(f"‚ùå Failed to create default config: {e}")
            raise
    
    def setup_syncthing_folder(self):
        """Thi·∫øt l·∫≠p folder Syncthing cho Master Node"""
        try:
            # T·∫°o folder n·∫øu ch∆∞a c√≥
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            folder_path.mkdir(parents=True, exist_ok=True)
            
            # T·∫°o file .stignore ƒë·ªÉ lo·∫°i tr·ª´ file kh√¥ng c·∫ßn thi·∫øt
            stignore_file = folder_path / ".stignore"
            if not stignore_file.exists():
                ignore_patterns = [
                    "*.log",
                    "*.tmp",
                    "*.cache",
                    "*.bak",
                    "*.old",
                    "*.zip",
                    "*.rar",
                    "*.7z",
                    "*.tar.gz",
                    "*.exe",
                    "*.msi",
                    "*.dll",
                    "*.sys",
                    "*.ini",
                    "*.cfg",
                    "*.conf",
                    "*.config",
                    "*.xml.bak",
                    "*.xml.old",
                    "*.xml.tmp",
                    "*.xml.cache",
                    "*.xml.log",
                    "*.xml.zip",
                    "*.xml.rar",
                    "*.xml.7z",
                    "*.xml.tar.gz",
                    "*.xml.exe",
                    "*.xml.msi",
                    "*.xml.dll",
                    "*.xml.sys",
                    "*.xml.ini",
                    "*.xml.cfg",
                    "*.xml.conf",
                    "*.xml.config"
                ]
                
                with open(stignore_file, 'w', encoding='utf-8') as f:
                    f.write("\n".join(ignore_patterns))
                
                logging.info("‚úÖ .stignore file created")
            
            # T·∫°o file README ƒë·ªÉ gi·∫£i th√≠ch folder
            readme_file = folder_path / "README_MASTER.md"
            if not readme_file.exists():
                readme_content = f"""# üöÄ THU·∫æ FORTRESS SYNC - MASTER NODE

## üìÅ Th∆∞ m·ª•c n√†y ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Hybrid Fortress Master
- **Ch·ª©c nƒÉng:** Chia s·∫ª file thu·∫ø XML g·ªëc v·ªõi t·∫•t c·∫£ Slave Node
- **Quy·ªÅn:** Ch·ªâ Master Node m·ªõi ƒë∆∞·ª£c ch·ªânh s·ª≠a
- **ƒê·ªìng b·ªô:** T·ª± ƒë·ªông v·ªõi t·∫•t c·∫£ m√°y con qua Syncthing

## üîí B·∫£o m·∫≠t
- File trong th∆∞ m·ª•c n√†y s·∫Ω ƒë∆∞·ª£c b·∫£o v·ªá 100%
- Slave Node ch·ªâ c√≥ th·ªÉ nh·∫≠n, kh√¥ng th·ªÉ s·ª≠a ƒë·ªïi
- M·ªçi thay ƒë·ªïi s·∫Ω b·ªã ghi ƒë√® v·ªÅ b·∫£n g·ªëc

## üìä Monitoring
- Theo d√µi real-time m·ªçi thay ƒë·ªïi
- Log chi ti·∫øt m·ªçi ho·∫°t ƒë·ªông
- B√°o c√°o b·∫£o m·∫≠t qua Telegram Bot

---
**H·ªá th·ªëng: THU·∫æ FORTRESS SYNC v1.0**
**Master Node: {SYNCTHING_CONFIG['folderRoot']}**
**Th·ªùi gian t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}**
"""
                
                with open(readme_file, 'w', encoding='utf-8') as f:
                    f.write(readme_content)
                
                logging.info("‚úÖ README_MASTER.md created")
            
            logging.info(f"‚úÖ Syncthing folder setup completed: {folder_path}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to setup Syncthing folder: {e}")
            return False
    
    def get_syncthing_api_key(self):
        """L·∫•y API key t·ª´ Syncthing config"""
        try:
            # ƒê∆∞·ªùng d·∫´n config Syncthing
            config_path = Path.home() / "AppData/Local/Syncthing/config.xml"
            
            if not config_path.exists():
                logging.warning("‚ö†Ô∏è Syncthing config not found, trying alternative path")
                config_path = Path.home() / "AppData/Roaming/Syncthing/config.xml"
            
            if config_path.exists():
                # Parse XML ƒë·ªÉ l·∫•y API key
                tree = ET.parse(config_path)
                root = tree.getroot()
                
                # T√¨m th·∫ª gui
                gui_element = root.find("gui")
                if gui_element is not None:
                    api_key = gui_element.find("apikey")
                    if api_key is not None:
                        SYNCTHING_CONFIG["apiKey"] = api_key.text
                        logging.info("‚úÖ Syncthing API key retrieved")
                        return True
            
            logging.warning("‚ö†Ô∏è API key not found in config, will use default")
            return False
            
        except Exception as e:
            logging.error(f"‚ùå Failed to get Syncthing API key: {e}")
            return False
    
    def create_syncthing_folder_config(self):
        """T·∫°o c·∫•u h√¨nh folder trong Syncthing"""
        try:
            if not SYNCTHING_CONFIG["apiKey"]:
                if not self.get_syncthing_api_key():
                    logging.error("‚ùå Cannot create folder config without API key")
                    return False
            
            # Ki·ªÉm tra xem folder ƒë√£ c√≥ ch∆∞a
            headers = {"X-API-Key": SYNCTHING_CONFIG["apiKey"]}
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/config/folders",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                folders = response.json()
                for folder in folders:
                    if folder.get("id") == "tax_xml_master":
                        SYNCTHING_CONFIG["folderId"] = "tax_xml_master"
                        logging.info("‚úÖ Syncthing folder already exists")
                        
                        # C·∫≠p nh·∫≠t folder config n·∫øu c·∫ßn
                        self._update_folder_config()
                        return True
            
            # N·∫øu folder ch∆∞a c√≥, t·∫°o m·ªõi
            folder_config = {
                "id": "tax_xml_master",
                "label": "THU·∫æ FORTRESS SYNC - XML Master",
                "path": SYNCTHING_CONFIG["folderRoot"],
                "type": "sendreceive",
                "rescanIntervalS": 10,
                "fsWatcherEnabled": True,
                "fsWatcherDelayS": 10,
                "ignorePerms": False,
                "autoNormalize": True,
                "minDiskFree": {
                    "path": "",
                    "value": 1
                },
                "versioning": {
                    "type": "none"
                },
                "devices": []
            }
            
            # G·ª≠i request t·∫°o folder
            response = requests.post(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/config/folders",
                json=folder_config,
                headers=headers,
                timeout=10
            )
            
            if response.status_code in [200, 409]:  # 409 = folder ƒë√£ t·ªìn t·∫°i
                SYNCTHING_CONFIG["folderId"] = "tax_xml_master"
                logging.info("‚úÖ Syncthing folder config created/updated")
                
                # C·∫≠p nh·∫≠t folder config
                self._update_folder_config()
                return True
            else:
                logging.error(f"‚ùå Failed to create folder config: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå Failed to create Syncthing folder config: {e}")
            return False
    
    def _update_folder_config(self):
        """C·∫≠p nh·∫≠t c·∫•u h√¨nh folder v·ªõi device ID c·ªßa Master"""
        try:
            if not SYNCTHING_CONFIG["apiKey"] or not SYNCTHING_CONFIG["folderId"]:
                return False
            
            # L·∫•y device ID c·ªßa Master
            headers = {"X-API-Key": SYNCTHING_CONFIG["apiKey"]}
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                status = response.json()
                master_device_id = status.get("myID")
                
                if master_device_id:
                    # C·∫≠p nh·∫≠t folder config ƒë·ªÉ th√™m Master device
                    folder_config = {
                        "devices": [
                            {
                                "deviceID": master_device_id,
                                "introducedBy": "",
                                "encryptionPassword": ""
                            }
                        ]
                    }
                    
                    # G·ª≠i request c·∫≠p nh·∫≠t
                    update_response = requests.put(
                        f"{SYNCTHING_CONFIG['baseUrl']}/rest/config/folders/{SYNCTHING_CONFIG['folderId']}",
                        json=folder_config,
                        headers=headers,
                        timeout=10
                    )
                    
                    if update_response.status_code == 200:
                        logging.info(f"‚úÖ Folder config updated with Master device: {master_device_id}")
                        return True
                    else:
                        logging.warning(f"‚ö†Ô∏è Failed to update folder config: {update_response.status_code}")
                        return False
            
            return False
            
        except Exception as e:
            logging.error(f"‚ùå Failed to update folder config: {e}")
            return False
    
    def start_monitoring(self):
        """B·∫Øt ƒë·∫ßu monitoring h·ªá th·ªëng"""
        try:
            self.is_running = True
            
            # Thread monitoring ch√≠nh
            monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
            monitor_thread.start()
            
            # Thread health check
            health_thread = threading.Thread(target=self._health_check_loop, daemon=True)
            health_thread.start()
            
            logging.info("‚úÖ Monitoring started successfully")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Failed to start monitoring: {e}")
            return False
    
    def _monitor_loop(self):
        """V√≤ng l·∫∑p monitoring ch√≠nh"""
        while self.is_running:
            try:
                # Ki·ªÉm tra tr·∫°ng th√°i Syncthing
                self._check_syncthing_status()
                
                # Ki·ªÉm tra thay ƒë·ªïi file
                self._check_file_changes()
                
                # Ki·ªÉm tra machine status
                if self.machine_manager:
                    self._check_machine_health()
                
                time.sleep(5)  # 5 gi√¢y
                
            except Exception as e:
                logging.error(f"‚ùå Error in monitor loop: {e}")
                time.sleep(10)  # TƒÉng delay n·∫øu c√≥ l·ªói
    
    def _health_check_loop(self):
        """V√≤ng l·∫∑p health check ƒë·ªãnh k·ª≥"""
        while self.is_running:
            try:
                # Health check m·ªói 5 ph√∫t
                time.sleep(300)
                
                # Ki·ªÉm tra s·ª©c kh·ªèe t·ªïng th·ªÉ
                self._perform_health_check()
                
            except Exception as e:
                logging.error(f"‚ùå Error in health check loop: {e}")
    
    def _check_syncthing_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i Syncthing"""
        try:
            if not SYNCTHING_CONFIG["apiKey"]:
                return
            
            headers = {"X-API-Key": SYNCTHING_CONFIG["apiKey"]}
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status",
                headers=headers,
                timeout=5
            )
            
            if response.status_code == 200:
                status = response.json()
                if status.get("myID"):
                    logging.debug(f"‚úÖ Syncthing running - Device ID: {status['myID']}")
                else:
                    logging.warning("‚ö†Ô∏è Syncthing status incomplete")
            else:
                logging.warning(f"‚ö†Ô∏è Syncthing status check failed: {response.status_code}")
                
        except Exception as e:
            logging.error(f"‚ùå Syncthing status check error: {e}")
    
    def _check_file_changes(self):
        """Ki·ªÉm tra thay ƒë·ªïi file trong folder"""
        try:
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            if not folder_path.exists():
                return
            
            # Ki·ªÉm tra file m·ªõi ho·∫∑c thay ƒë·ªïi
            current_files = set()
            for file_path in folder_path.rglob("*"):
                if file_path.is_file():
                    stat = file_path.stat()
                    current_files.add((file_path, stat.st_mtime, stat.st_size))
            
            # So s√°nh v·ªõi tr·∫°ng th√°i tr∆∞·ªõc
            if hasattr(self, '_previous_files'):
                new_files = current_files - self._previous_files
                if new_files:
                    for file_path, mtime, size in new_files:
                        logging.info(f"üìÅ New/Modified file detected: {file_path.name}")
                        
                        # G·ª≠i th√¥ng b√°o qua Telegram n·∫øu c·∫ßn
                        if self._should_notify_file_change(file_path):
                            self._send_telegram_notification(f"üìÅ File m·ªõi: {file_path.name}")
            
            self._previous_files = current_files
            
        except Exception as e:
            logging.error(f"‚ùå File change check error: {e}")
    
    def _check_machine_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe c√°c m√°y con"""
        try:
            if not self.machine_manager:
                return
            
            # S·ª≠ d·ª•ng XMLProcessor ƒë·ªÉ ki·ªÉm tra machine health
            # (Logic n√†y s·∫Ω ƒë∆∞·ª£c implement khi t√≠ch h·ª£p ho√†n ch·ªânh)
            pass
            
        except Exception as e:
            logging.error(f"‚ùå Machine health check error: {e}")
    
    def _perform_health_check(self):
        """Th·ª±c hi·ªán health check t·ªïng th·ªÉ"""
        try:
            health_status = {
                "timestamp": datetime.now().isoformat(),
                "syncthing": self._check_syncthing_health(),
                "folder": self._check_folder_health(),
                "machines": self._check_machines_health(),
                "overall": "healthy"
            }
            
            # ƒê√°nh gi√° t·ªïng th·ªÉ
            if any(status == "unhealthy" for status in health_status.values() if isinstance(status, str)):
                health_status["overall"] = "unhealthy"
                logging.warning("‚ö†Ô∏è System health check: UNHEALTHY")
                
                # G·ª≠i c·∫£nh b√°o qua Telegram
                self._send_telegram_notification("‚ö†Ô∏è H·ªá th·ªëng c√≥ v·∫•n ƒë·ªÅ - Ki·ªÉm tra ngay!")
            else:
                logging.info("‚úÖ System health check: HEALTHY")
            
            # L∆∞u health status
            health_file = APP_DIR / 'health_status.json'
            with open(health_file, 'w', encoding='utf-8') as f:
                json.dump(health_status, f, indent=2, ensure_ascii=False)
            
        except Exception as e:
            logging.error(f"‚ùå Health check error: {e}")
    
    def _check_syncthing_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe Syncthing"""
        try:
            if not SYNCTHING_CONFIG["apiKey"]:
                return "unknown"
            
            headers = {"X-API-Key": SYNCTHING_CONFIG["apiKey"]}
            response = requests.get(
                f"{SYNCTHING_CONFIG['baseUrl']}/rest/system/status",
                headers=headers,
                timeout=5
            )
            
            if response.status_code == 200:
                return "healthy"
            else:
                return "unhealthy"
                
        except Exception:
            return "unhealthy"
    
    def _check_folder_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe folder"""
        try:
            folder_path = Path(SYNCTHING_CONFIG["folderRoot"])
            if folder_path.exists() and folder_path.is_dir():
                return "healthy"
            else:
                return "unhealthy"
        except Exception:
            return "unhealthy"
    
    def _check_machines_health(self):
        """Ki·ªÉm tra s·ª©c kh·ªèe c√°c m√°y con"""
        try:
            # Logic ki·ªÉm tra m√°y con s·∫Ω ƒë∆∞·ª£c implement sau
            return "healthy"
        except Exception:
            return "unhealthy"
    
    def _should_notify_file_change(self, file_path):
        """Quy·∫øt ƒë·ªãnh c√≥ g·ª≠i th√¥ng b√°o file thay ƒë·ªïi kh√¥ng"""
        try:
            # Ch·ªâ th√¥ng b√°o file XML thu·∫ø
            if file_path.suffix.lower() == '.xml':
                # Ki·ªÉm tra t√™n file c√≥ pattern thu·∫ø kh√¥ng
                filename = file_path.name.lower()
                tax_keywords = ['tax', 'thue', 'etax', 'vat', 'invoice']
                return any(keyword in filename for keyword in tax_keywords)
            return False
        except Exception:
            return False
    
    def _send_telegram_notification(self, message):
        """G·ª≠i th√¥ng b√°o qua Telegram"""
        try:
            if not TELEGRAM_CONFIG.get("bot_token") or not TELEGRAM_CONFIG.get("group_id"):
                return
            
            url = f"https://api.telegram.org/bot{TELEGRAM_CONFIG['bot_token']}/sendMessage"
            data = {
                "chat_id": TELEGRAM_CONFIG["group_id"],
                "text": f"üöÄ **THU·∫æ FORTRESS SYNC**\n\n{message}\n\n‚è∞ {datetime.now().strftime('%H:%M:%S')}",
                "parse_mode": "Markdown"
            }
            
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                logging.info(f"‚úÖ Telegram notification sent: {message}")
            else:
                logging.warning(f"‚ö†Ô∏è Telegram notification failed: {response.status_code}")
                
        except Exception as e:
            logging.error(f"‚ùå Telegram notification error: {e}")
    
    def stop_monitoring(self):
        """D·ª´ng monitoring"""
        try:
            self.is_running = False
            logging.info("‚úÖ Monitoring stopped")
            return True
        except Exception as e:
            logging.error(f"‚ùå Failed to stop monitoring: {e}")
            return False
    
    def get_system_status(self):
        """L·∫•y tr·∫°ng th√°i t·ªïng th·ªÉ h·ªá th·ªëng"""
        try:
            status = {
                "timestamp": datetime.now().isoformat(),
                "master_node": {
                    "status": "running" if self.is_running else "stopped",
                    "syncthing": "connected" if SYNCTHING_CONFIG.get("apiKey") else "disconnected",
                    "folder": SYNCTHING_CONFIG.get("folderId", "unknown"),
                    "path": SYNCTHING_CONFIG.get("folderRoot", "unknown")
                },
                "components": {
                    "xml_processor": "available" if XML_PROCESSOR_AVAILABLE else "unavailable",
                    "machine_manager": "active" if self.machine_manager else "inactive",
                    "telegram_bot": "active" if TELEGRAM_CONFIG.get("bot_token") else "inactive"
                },
                "monitoring": {
                    "status": "active" if self.is_running else "inactive",
                    "last_health_check": "N/A"  # S·∫Ω c·∫≠p nh·∫≠t sau
                }
            }
            
            return status
            
        except Exception as e:
            logging.error(f"‚ùå Failed to get system status: {e}")
            return {"error": str(e)}
    
    def run(self):
        """Ch·∫°y Master Node"""
        try:
            print("üöÄ THU·∫æ FORTRESS SYNC - MASTER NODE")
            print("=" * 50)
            
            # Thi·∫øt l·∫≠p Syncthing folder
            print("üìÅ Thi·∫øt l·∫≠p Syncthing folder...")
            if not self.setup_syncthing_folder():
                print("‚ùå Failed to setup Syncthing folder")
                return False
            
            # T·∫°o c·∫•u h√¨nh Syncthing
            print("‚öôÔ∏è  T·∫°o c·∫•u h√¨nh Syncthing...")
            if not self.create_syncthing_folder_config():
                print("‚ùå Failed to create Syncthing folder config")
                return False
            
            # B·∫Øt ƒë·∫ßu monitoring
            print("üîÑ Kh·ªüi ƒë·ªông monitoring...")
            if not self.start_monitoring():
                print("‚ùå Failed to start monitoring")
                return False
            
            print("\n‚úÖ Master Node started successfully!")
            print("=" * 50)
            print(f"üìÅ Folder ID: {SYNCTHING_CONFIG.get('folderId', 'N/A')}")
            print(f"üìÇ Path: {SYNCTHING_CONFIG.get('folderRoot', 'N/A')}")
            print(f"üîë API Key: {'‚úÖ ƒê√£ c·∫•u h√¨nh' if SYNCTHING_CONFIG.get('apiKey') else '‚ùå Ch∆∞a c·∫•u h√¨nh'}")
            print(f"üîÑ Monitoring: {'‚úÖ ƒêang ch·∫°y' if self.is_running else '‚ùå ƒê√£ d·ª´ng'}")
            print(f"ü§ñ Telegram Bot: {'‚úÖ ƒê√£ c·∫•u h√¨nh' if TELEGRAM_CONFIG.get('bot_token') else '‚ùå Ch∆∞a c·∫•u h√¨nh'}")
            print("=" * 50)
            
            print("\nüí° ƒê·ªÉ c·∫•u h√¨nh Syncthing:")
            print("   1. M·ªü tr√¨nh duy·ªát: http://127.0.0.1:8384")
            print("   2. C·∫•u h√¨nh folder 'tax_xml_master'")
            print("   3. Th√™m Slave Node")
            print("\n‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
            
            # V√≤ng l·∫∑p ch√≠nh
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  D·ª´ng Master Node...")
                self.stop_monitoring()
                print("‚úÖ Master Node stopped")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå Master Node run error: {e}")
            print(f"‚ùå Error: {e}")
            return False

# --- MAIN --- #
if __name__ == "__main__":
    try:
        master = HybridFortressMaster()
        master.run()
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        logging.critical(f"Fatal error: {e}")
        sys.exit(1)
